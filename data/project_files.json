{
  "_default": {
    "1": {
      "id": "overview_proj_1750310310_6823_1750310746",
      "project_id": "proj_1750310310_6823",
      "file_type": "project_overview",
      "file_name": "ProjectOverview.md",
      "content": "# Project Overview\n\nGenerated from Task Master on 2025-06-19 10:55:46\n\n## Summary\n\nThis project consists of 3 main tasks generated from the Product Requirements Document (PRD).\n\n## Task Breakdown\n\n### High Priority Tasks\n\n- **Task 1**: Implement Backend API with JSON File Database\n- **Task 2**: Develop Frontend User Interface\n\n### Medium Priority Tasks\n\n- **Task 3**: Integrate Frontend with Backend and Perform E2E Testing\n\n## Implementation Notes\n\nEach task has been designed to be atomic and focused on a single responsibility. Tasks are ordered logically considering dependencies and implementation sequence.\n\nFor detailed information about each task, refer to the individual task files.\n",
      "metadata": {
        "generated_from": "task_master",
        "tasks_count": 3,
        "generation_timestamp": "2025-06-19T10:55:46.517710",
        "is_primary": true
      },
      "status": "generated",
      "created_at": "2025-06-19T10:55:46.517710",
      "updated_at": "2025-06-19T10:55:46.517710"
    },
    "2": {
      "id": "task_proj_1750310310_6823_1_1750310746",
      "project_id": "proj_1750310310_6823",
      "file_type": "task_file",
      "file_name": "Task_001_Implement_Backend_API_with_JSON_File_Database.md",
      "content": "# Task 1: Implement Backend API with JSON File Database\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: None\n\n## Description\n\nSet up a Node.js server and create API endpoints for adding, marking complete, and deleting tasks, persisting data in a local JSON file.\n\n## Implementation Details\n\nInitialize a Node.js project using 'npm init'. Install 'express' for the web server. Create a 'db.json' file to store tasks (e.g., [{ id: 1, text: \"Buy groceries\", completed: false }]). Implement API endpoints:\n- POST /tasks: Add a new task. Generate unique ID (e.g., simple increment).\n- PUT /tasks/:id/complete: Mark a task as complete.\n- DELETE /tasks/:id: Delete a task.\n- GET /tasks: Retrieve all tasks.\nUse Node.js 'fs' module for reading/writing to 'db.json'. Ensure atomic writes to prevent data corruption. Consider using 'path' module for robust file path handling.\n\nPseudo-code for server.js:\nconst express = require('express');\nconst fs = require('fs');\nconst path = require('path');\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json());\n\nconst DB_FILE = path.join(__dirname, 'db.json');\n\nconst readDb = () => {\n    try {\n        const data = fs.readFileSync(DB_FILE, 'utf8');\n        return JSON.parse(data);\n    } catch (error) {\n        if (error.code === 'ENOENT') {\n            fs.writeFileSync(DB_FILE, '[]', 'utf8');\n            return [];\n        }\n        console.error('Error reading DB file:', error);\n        return [];\n    }\n};\n\nconst writeDb = (data) => {\n    fs.writeFileSync(DB_FILE, JSON.stringify(data, null, 2), 'utf8');\n};\n\napp.get('/tasks', (req, res) => {\n    res.json(readDb());\n});\n\napp.post('/tasks', (req, res) => {\n    const tasks = readDb();\n    const newTask = {\n        id: tasks.length > 0 ? Math.max(...tasks.map(t => t.id)) + 1 : 1,\n        text: req.body.text,\n        completed: false\n    };\n    tasks.push(newTask);\n    writeDb(tasks);\n    res.status(201).json(newTask);\n});\n\napp.put('/tasks/:id/complete', (req, res) => {\n    const tasks = readDb();\n    const taskId = parseInt(req.params.id);\n    const taskIndex = tasks.findIndex(t => t.id === taskId);\n\n    if (taskIndex > -1) {\n        tasks[taskIndex].completed = true;\n        writeDb(tasks);\n        res.json(tasks[taskIndex]);\n    } else {\n        res.status(404).send('Task not found');\n    }\n});\n\napp.delete('/tasks/:id', (req, res) => {\n    let tasks = readDb();\n    const taskId = parseInt(req.params.id);\n    const initialLength = tasks.length;\n    tasks = tasks.filter(t => t.id !== taskId);\n\n    if (tasks.length < initialLength) {\n        writeDb(tasks);\n        res.status(204).send();\n    } else {\n        res.status(404).send('Task not found');\n    }\n});\n\napp.listen(PORT, () => {\n    console.log(`Server running on http://localhost:${PORT}`);\n});\n\n## Test Strategy\n\nUse 'curl' or a tool like Postman/Insomnia to test each API endpoint (GET, POST, PUT, DELETE) for correct responses and data persistence in 'db.json'. Verify edge cases such as attempting to modify/delete non-existent task IDs.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:55:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 1,
        "task_title": "Implement Backend API with JSON File Database",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T10:55:46.526736",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:55:46.526736",
      "updated_at": "2025-06-19T10:55:46.526736"
    },
    "3": {
      "id": "task_proj_1750310310_6823_2_1750310746",
      "project_id": "proj_1750310310_6823",
      "file_type": "task_file",
      "file_name": "Task_002_Develop_Frontend_User_Interface.md",
      "content": "# Task 2: Develop Frontend User Interface\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 1\n\n## Description\n\nCreate the HTML structure, apply CSS styling, and implement JavaScript logic to display tasks, add new tasks, mark tasks as complete, and delete tasks by interacting with the backend API.\n\n## Implementation Details\n\nCreate 'index.html' with basic structure including an input field for new tasks, an 'Add Task' button, and a container (e.g., 'ul' or 'div') for displaying tasks. Create 'style.css' for basic styling (e.g., task list appearance, completed task styling). Create 'script.js' to handle client-side logic:\n- On page load, fetch tasks from 'GET /tasks' and render them dynamically.\n- Implement an event listener for the 'Add Task' button to send a 'POST /tasks' request with the new task text, then re-render the task list.\n- Implement event listeners for 'Mark Complete' and 'Delete' actions on each task item to send 'PUT /tasks/:id/complete' or 'DELETE /tasks/:id' requests respectively, then update the UI.\n- Use the 'fetch' API for all HTTP requests to the backend.\n\nPseudo-code for script.js:\nconst API_BASE_URL = 'http://localhost:3000';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    fetchTasks();\n    document.getElementById('addTaskButton').addEventListener('click', addTask);\n});\n\nasync function fetchTasks() {\n    const response = await fetch(`${API_BASE_URL}/tasks`);\n    const tasks = await response.json();\n    renderTasks(tasks);\n}\n\nfunction renderTasks(tasks) {\n    const taskList = document.getElementById('taskList');\n    taskList.innerHTML = '';\n    tasks.forEach(task => {\n        const li = document.createElement('li');\n        li.className = task.completed ? 'completed' : '';\n        li.innerHTML = `\n            <span>${task.text}</span>\n            <button onclick=\"toggleComplete(${task.id})\">${task.completed ? 'Unmark' : 'Complete'}</button>\n            <button onclick=\"deleteTask(${task.id})\">Delete</button>\n        `;\n        taskList.appendChild(li);\n    });\n}\n\nasync function addTask() {\n    const taskInput = document.getElementById('taskInput');\n    const text = taskInput.value.trim();\n    if (!text) return;\n\n    await fetch(`${API_BASE_URL}/tasks`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ text })\n    });\n    taskInput.value = '';\n    fetchTasks();\n}\n\nasync function toggleComplete(id) {\n    await fetch(`${API_BASE_URL}/tasks/${id}/complete`, {\n        method: 'PUT'\n    });\n    fetchTasks();\n}\n\nasync function deleteTask(id) {\n    await fetch(`${API_BASE_URL}/tasks/${id}`, {\n        method: 'DELETE'\n    });\n    fetchTasks();\n}\n\n## Test Strategy\n\nManually test in a web browser: Add new tasks and verify they appear. Mark tasks as complete and verify their visual state changes. Delete tasks and verify they are removed. Refresh the page to ensure data persistence. Check browser console for JavaScript errors.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:55:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 2,
        "task_title": "Develop Frontend User Interface",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          1
        ],
        "generation_timestamp": "2025-06-19T10:55:46.534735",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:55:46.534735",
      "updated_at": "2025-06-19T10:55:46.534735"
    },
    "4": {
      "id": "task_proj_1750310310_6823_3_1750310746",
      "project_id": "proj_1750310310_6823",
      "file_type": "task_file",
      "file_name": "Task_003_Integrate_Frontend_with_Backend_and_Perform_E2E_Testing.md",
      "content": "# Task 3: Integrate Frontend with Backend and Perform E2E Testing\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 1, Task 2\n\n## Description\n\nEnsure seamless communication between the frontend and backend, and conduct comprehensive end-to-end testing to validate all features work as expected from a user's perspective.\n\n## Implementation Details\n\nEnsure the Node.js server is running and accessible from the frontend. If the frontend is served from a different origin (e.g., directly from file system), configure CORS on the Node.js backend to allow requests from the frontend origin. A simpler approach for local development is to serve the static frontend files (index.html, style.css, script.js) directly from the Node.js server using 'express.static' middleware (e.g., 'app.use(express.static('public'));' with frontend files in a 'public' folder).\n\nPerform a full user flow test:\n1. Start both frontend and backend components.\n2. Add multiple new tasks.\n3. Mark some tasks as complete.\n4. Delete some tasks.\n5. Refresh the browser to ensure the state is preserved.\n6. Restart the backend server and then refresh the browser to confirm data persistence across server restarts (due to JSON file storage).\n\n## Test Strategy\n\nConduct manual end-to-end testing by following the described user flow. Verify data consistency between the frontend display and the 'db.json' file after each operation. Use browser developer tools to monitor network requests and responses to ensure correct API calls are made and data is exchanged properly. Check for any console errors or warnings in both the browser and Node.js server logs.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:55:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 3,
        "task_title": "Integrate Frontend with Backend and Perform E2E Testing",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          1,
          2
        ],
        "generation_timestamp": "2025-06-19T10:55:46.544034",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:55:46.544034",
      "updated_at": "2025-06-19T10:55:46.544034"
    },
    "5": {
      "id": "tasks_index_proj_1750310310_6823_1750310746",
      "project_id": "proj_1750310310_6823",
      "file_type": "tasks_index",
      "file_name": "Tasks_Index.md",
      "content": "# Tasks Index\n\nGenerated on 2025-06-19 10:55:46\n\nTotal Tasks: 3\n\n## Task List\n\n| ID | Title | Priority | Status | Dependencies |\n|----|-------|----------|--------|--------------|\n| 1 | Implement Backend API with JSON File Database | high | pending | None |\n| 2 | Develop Frontend User Interface | high | pending | #1 |\n| 3 | Integrate Frontend with Backend and Perform E2E Testing | medium | pending | #1, #2 |\n\n## Task Dependencies\n\nThe following diagram shows the task dependencies:\n\n```\nTask 2 depends on: Task 1\nTask 3 depends on: Task 1, Task 2\n```\n",
      "metadata": {
        "generated_from": "task_master",
        "tasks_count": 3,
        "generation_timestamp": "2025-06-19T10:55:46.553175",
        "is_primary": true
      },
      "status": "generated",
      "created_at": "2025-06-19T10:55:46.553175",
      "updated_at": "2025-06-19T10:55:46.553175"
    },
    "6": {
      "id": "overview_proj_1750308664554_vnllv97tt_1750310913",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "project_overview",
      "file_name": "ProjectOverview.md",
      "content": "# Project Overview\n\nGenerated from Task Master on 2025-06-19 10:58:33\n\n## Summary\n\nThis project consists of 10 main tasks generated from the Product Requirements Document (PRD).\n\n## Task Breakdown\n\n### High Priority Tasks\n\n- **Task 1**: AWS Infrastructure & Flutter Project Setup\n- **Task 2**: Implement User Authentication (Cognito)\n- **Task 3**: Develop Core User Profile Management & Multi-Profile Logic\n- **Task 4**: Implement Admin: Campus, Class, Subject Management\n\n### Medium Priority Tasks\n\n- **Task 5**: Implement Admin: Teacher & Student Assignment\n- **Task 6**: Implement Teacher: Class Access, Attendance & Daily Activities\n- **Task 7**: Implement Teacher: Assessment & Results Publication\n- **Task 8**: Implement Parent: Attendance, Daily Diary & Results Access\n- **Task 9**: Implement Cross-Cutting Features: Communication & Leave Management\n- **Task 10**: Implement Admin: Timetable, Transportation, Academic Activities, Fee Management & UI Integration\n\n## Implementation Notes\n\nEach task has been designed to be atomic and focused on a single responsibility. Tasks are ordered logically considering dependencies and implementation sequence.\n\nFor detailed information about each task, refer to the individual task files.\n",
      "metadata": {
        "generated_from": "task_master",
        "tasks_count": 10,
        "generation_timestamp": "2025-06-19T10:58:33.860030",
        "is_primary": true
      },
      "status": "generated",
      "created_at": "2025-06-19T10:58:33.860030",
      "updated_at": "2025-06-19T10:58:33.860030"
    },
    "7": {
      "id": "task_proj_1750308664554_vnllv97tt_1_1750310913",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_001_AWS_Infrastructure_&_Flutter_Project_Setup.md",
      "content": "# Task 1: AWS Infrastructure & Flutter Project Setup\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: None\n\n## Description\n\nSet up the foundational AWS infrastructure using Amplify and Serverless framework, including initial Flutter project setup. This involves configuring AWS accounts, initializing the Amplify project, and setting up the Serverless framework for Lambda functions and API Gateway.\n\n## Implementation Details\n\n1. Initialize a new Flutter project: flutter create campus_pilot. 2. Configure AWS Amplify CLI: amplify configure. 3. Initialize Amplify project within Flutter app: amplify init. 4. Set up Serverless framework: npm install -g serverless. 5. Define initial AWS resources (e.g., S3 for Amplify hosting, basic IAM roles) using Amplify CLI and Serverless YAML configurations. Ensure proper region selection and credential setup.\n\n## Test Strategy\n\nVerify Amplify project is initialized correctly by running 'amplify status'. Confirm Flutter project builds successfully. Check AWS console for created Amplify resources and Serverless deployments.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:58:33*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 1,
        "task_title": "AWS Infrastructure & Flutter Project Setup",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T10:58:33.894342",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:58:33.894342",
      "updated_at": "2025-06-19T10:58:33.894342"
    },
    "8": {
      "id": "task_proj_1750308664554_vnllv97tt_2_1750310913",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_002_Implement_User_Authentication_(Cognito).md",
      "content": "# Task 2: Implement User Authentication (Cognito)\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 1\n\n## Description\n\nImplement user registration and login functionalities using AWS Cognito. This includes handling email/password registration, user authentication, and session management.\n\n## Implementation Details\n\n1. Add Cognito authentication to Amplify project: amplify add auth. Configure email/password sign-in. 2. Implement Flutter UI for user registration (email, password, name) and login. 3. Use Amplify Auth methods (Amplify.Auth.signUp, Amplify.Auth.signIn) for user management. 4. Implement password recovery flow. 5. Ensure secure storage of user tokens.\n\n## Test Strategy\n\nTest user registration with valid and invalid inputs. Verify successful login and session persistence. Test password reset functionality. Confirm user pool entries in Cognito console.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:58:33*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 2,
        "task_title": "Implement User Authentication (Cognito)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          1
        ],
        "generation_timestamp": "2025-06-19T10:58:33.910983",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:58:33.910983",
      "updated_at": "2025-06-19T10:58:33.910983"
    },
    "9": {
      "id": "task_proj_1750308664554_vnllv97tt_3_1750310913",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_003_Develop_Core_User_Profile_Management_&_Multi-Profile_Logic.md",
      "content": "# Task 3: Develop Core User Profile Management & Multi-Profile Logic\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 2\n\n## Description\n\nDevelop the core logic and database schema for managing multiple user profiles (Admin, Teacher, Parent) per user account. This includes selecting existing profiles on login, creating new profiles if none exist, and automatic redirection to the appropriate dashboard.\n\n## Implementation Details\n\n1. Design DynamoDB schema for 'Profiles' table: userId (PK), profileId (SK), profileType (Admin, Teacher, Parent), campusId, details (e.g., name, contact). 2. Create Lambda functions (via Serverless) for profile creation, retrieval, and selection. 3. Implement API Gateway endpoints for these Lambda functions. 4. In Flutter, after login, check for existing profiles. If multiple, present a selection screen. If none, prompt for new profile creation. 5. Store selected profile ID locally (e.g., SharedPreferences) for automatic redirection on app reopen.\n\n## Test Strategy\n\nTest user login with no profiles, one profile, and multiple profiles. Verify correct redirection to dashboard. Test creation of Admin, Teacher, Parent profiles. Check DynamoDB entries for accuracy.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:58:33*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 3,
        "task_title": "Develop Core User Profile Management & Multi-Profile Logic",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          2
        ],
        "generation_timestamp": "2025-06-19T10:58:33.943684",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:58:33.943684",
      "updated_at": "2025-06-19T10:58:33.943684"
    },
    "10": {
      "id": "task_proj_1750308664554_vnllv97tt_4_1750310913",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_004_Implement_Admin:_Campus,_Class,_Subject_Management.md",
      "content": "# Task 4: Implement Admin: Campus, Class, Subject Management\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 3\n\n## Description\n\nImplement the foundational Admin capabilities for Campus, Class, and Subject management. This includes creating, configuring, and managing campus settings, classes (with sections), and subjects for the academic year.\n\n## Implementation Details\n\n1. Design DynamoDB schemas for 'Campuses', 'Classes', 'Subjects' tables, linking to academic year. 2. Develop Lambda functions (via Serverless) for CRUD operations on these entities. 3. Expose these functions via API Gateway. 4. Build Flutter UI for Admin dashboard to: a) Setup campus settings (name, address, etc.). b) Create classes (e.g., 'Grade 10', 'Section A'). c) Create subjects (e.g., 'Mathematics', 'Science'). 5. Ensure data validation and error handling.\n\n## Test Strategy\n\nVerify Admin can create, update, and delete campuses, classes, and subjects. Test with valid and invalid data. Check data consistency in DynamoDB. Ensure proper linking to the academic year.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:58:33*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 4,
        "task_title": "Implement Admin: Campus, Class, Subject Management",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          3
        ],
        "generation_timestamp": "2025-06-19T10:58:33.960908",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:58:33.960908",
      "updated_at": "2025-06-19T10:58:33.960908"
    },
    "11": {
      "id": "task_proj_1750308664554_vnllv97tt_5_1750310913",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_005_Implement_Admin:_Teacher_&_Student_Assignment.md",
      "content": "# Task 5: Implement Admin: Teacher & Student Assignment\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 4\n\n## Description\n\nDevelop Admin functionalities for assigning teachers to subjects and classes, designating class teachers, and assigning students to classes for the academic year.\n\n## Implementation Details\n\n1. Design DynamoDB schemas for 'TeacherAssignments' (teacherId, classId, subjectId, academicYear) and 'StudentEnrollments' (studentId, classId, academicYear). 2. Implement Lambda functions for assigning teachers to specific subjects/classes, designating a single class teacher per class, and assigning students to classes. 3. Expose these via API Gateway. 4. Develop Flutter UI for Admin to manage these assignments, including search and selection of existing teacher/student profiles.\n\n## Test Strategy\n\nTest Admin's ability to assign teachers to subjects/classes. Verify only one class teacher can be assigned per class. Test student assignment to classes. Confirm data integrity in DynamoDB for assignments and enrollments.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:58:33*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 5,
        "task_title": "Implement Admin: Teacher & Student Assignment",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          4
        ],
        "generation_timestamp": "2025-06-19T10:58:33.977220",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:58:33.977220",
      "updated_at": "2025-06-19T10:58:33.977220"
    },
    "12": {
      "id": "task_proj_1750308664554_vnllv97tt_6_1750310914",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_006_Implement_Teacher:_Class_Access,_Attendance_&_Daily_Activities.md",
      "content": "# Task 6: Implement Teacher: Class Access, Attendance & Daily Activities\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 3, Task 5\n\n## Description\n\nImplement core Teacher functionalities: accessing assigned classes and subjects, marking student attendance using a weekly calendar (default present), and creating daily diary entries for tasks and homework.\n\n## Implementation Details\n\n1. Design DynamoDB schemas for 'Attendance' (studentId, classId, date, status) and 'DailyDiary' (classId, date, entryType, content). 2. Develop Lambda functions to retrieve assigned classes/subjects for a teacher, mark attendance (all present by default, uncheck absent), and create daily diary entries. 3. Expose via API Gateway. 4. Build Flutter UI for Teacher dashboard: a) Display assigned classes/subjects. b) Weekly calendar for attendance marking, with all students initially marked present. c) Interface for creating daily tasks/homework entries.\n\n## Test Strategy\n\nVerify teachers can view their assigned classes. Test attendance marking for a class, ensuring default 'present' and ability to mark 'absent'. Test creation and retrieval of daily diary entries. Check DynamoDB for accurate attendance and diary data.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:58:34*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 6,
        "task_title": "Implement Teacher: Class Access, Attendance & Daily Activities",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          3,
          5
        ],
        "generation_timestamp": "2025-06-19T10:58:34.010233",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:58:34.010233",
      "updated_at": "2025-06-19T10:58:34.010233"
    },
    "13": {
      "id": "task_proj_1750308664554_vnllv97tt_7_1750310914",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_007_Implement_Teacher:_Assessment_&_Results_Publication.md",
      "content": "# Task 7: Implement Teacher: Assessment & Results Publication\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 6\n\n## Description\n\nImplement Teacher functionalities for marking and grading student tasks/exams and publishing quarterly/half-yearly exam results for the academic year.\n\n## Implementation Details\n\n1. Design DynamoDB schemas for 'Assessments' (studentId, classId, subjectId, assessmentType, score, date) and 'Results' (studentId, classId, academicYear, quarter/halfYear, publishedDate, resultsData). 2. Develop Lambda functions for teachers to input scores/grades for tasks/exams and to publish aggregated results. 3. Expose via API Gateway. 4. Build Flutter UI for teachers to: a) Select a class/subject and student to input grades. b) Publish results for specific academic periods.\n\n## Test Strategy\n\nTest teachers' ability to input grades for students. Verify results can be published for specific periods. Check that published results are immutable. Confirm data consistency in DynamoDB.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:58:34*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 7,
        "task_title": "Implement Teacher: Assessment & Results Publication",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          6
        ],
        "generation_timestamp": "2025-06-19T10:58:34.026930",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:58:34.026930",
      "updated_at": "2025-06-19T10:58:34.026930"
    },
    "14": {
      "id": "task_proj_1750308664554_vnllv97tt_8_1750310914",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_008_Implement_Parent:_Attendance,_Daily_Diary_&_Results_Access.md",
      "content": "# Task 8: Implement Parent: Attendance, Daily Diary & Results Access\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 3, Task 6, Task 7\n\n## Description\n\nImplement Parent functionalities for viewing their child's daily attendance, accessing daily diary entries, and monitoring published exam results.\n\n## Implementation Details\n\n1. Develop Lambda functions to retrieve student-specific attendance, daily diary entries, and published results based on parent's linked child ID. 2. Expose these via API Gateway, ensuring proper authorization (parent can only view their child's data). 3. Build Flutter UI for Parent dashboard to: a) Display daily and overall attendance percentage. b) Weekly calendar view for daily diary entries. c) Access published quarterly/half-yearly results.\n\n## Test Strategy\n\nTest parent's ability to view their child's attendance, daily diary, and results. Verify data accuracy and that parents cannot access other children's data. Test filtering by date for daily diary.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:58:34*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 8,
        "task_title": "Implement Parent: Attendance, Daily Diary & Results Access",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          3,
          6,
          7
        ],
        "generation_timestamp": "2025-06-19T10:58:34.060426",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:58:34.060426",
      "updated_at": "2025-06-19T10:58:34.060426"
    },
    "15": {
      "id": "task_proj_1750308664554_vnllv97tt_9_1750310914",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_009_Implement_Cross-Cutting_Features:_Communication_&_Leave_Management.md",
      "content": "# Task 9: Implement Cross-Cutting Features: Communication & Leave Management\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 3, Task 5, Task 6, Task 8\n\n## Description\n\nImplement cross-cutting features for communication (notifications) and leave management across Admin, Teacher, and Parent roles.\n\n## Implementation Details\n\n1. Design DynamoDB schemas for 'Notifications' (senderId, recipientType/Id, message, timestamp) and 'LeaveRequests' (requesterId, studentId, startDate, endDate, reason, status). 2. Develop Lambda functions for: a) Admin to send notifications to campus-wide, specific groups (teachers, classes), or individuals. b) Teachers to send notifications to their classes/individual students. c) Parents/Teachers to submit leave requests. d) Admin/Teachers to approve/reject leave requests. 3. Expose via API Gateway. 4. Build Flutter UI for sending/viewing notifications and submitting/managing leave requests for all user types.\n\n## Test Strategy\n\nTest notification sending from Admin to various groups and individuals. Test teacher-to-class/student notifications. Verify all users can view relevant notifications. Test leave request submission by parents/teachers and approval/rejection by Admin/Teachers. Check status updates in DynamoDB.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:58:34*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 9,
        "task_title": "Implement Cross-Cutting Features: Communication & Leave Management",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          3,
          5,
          6,
          8
        ],
        "generation_timestamp": "2025-06-19T10:58:34.093703",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:58:34.093703",
      "updated_at": "2025-06-19T10:58:34.093703"
    },
    "16": {
      "id": "task_proj_1750308664554_vnllv97tt_10_1750310914",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_010_Implement_Admin:_Timetable,_Transportation,_Academic_Activities,_Fee_Management_&_UI_Integration.md",
      "content": "# Task 10: Implement Admin: Timetable, Transportation, Academic Activities, Fee Management & UI Integration\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 4, Task 5, Task 9\n\n## Description\n\nImplement remaining Admin capabilities including Timetable, Transportation, Academic Activities (exams, holidays), and Fee Management. Integrate all Admin features into a comprehensive and intuitive Flutter UI.\n\n## Implementation Details\n\n1. Design DynamoDB schemas for 'Timetables', 'TransportationRoutes', 'AcademicCalendar' (holidays, events, exam timetables), and 'FeeStructures'. 2. Develop Lambda functions for CRUD operations on these entities. 3. Expose via API Gateway. 4. Build Flutter UI for Admin to: a) Generate and manage timetables. b) Manage transportation routes, drivers, schedules. c) Define academic year holidays, events, and exam schedules. d) Add fee structures per class with due dates. 5. Ensure all Admin capabilities are accessible and logically organized within the Flutter application.\n\n## Test Strategy\n\nTest Admin's ability to create and manage timetables, transportation details, academic calendar events, and fee structures. Verify data persistence and accuracy in DynamoDB. Conduct end-to-end testing of the Admin application flow to ensure all features are integrated and functional.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 10:58:34*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 10,
        "task_title": "Implement Admin: Timetable, Transportation, Academic Activities, Fee Management & UI Integration",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          4,
          5,
          9
        ],
        "generation_timestamp": "2025-06-19T10:58:34.110301",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T10:58:34.110301",
      "updated_at": "2025-06-19T10:58:34.110301"
    },
    "17": {
      "id": "tasks_index_proj_1750308664554_vnllv97tt_1750310914",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "tasks_index",
      "file_name": "Tasks_Index.md",
      "content": "# Tasks Index\n\nGenerated on 2025-06-19 10:58:34\n\nTotal Tasks: 10\n\n## Task List\n\n| ID | Title | Priority | Status | Dependencies |\n|----|-------|----------|--------|--------------|\n| 1 | AWS Infrastructure & Flutter Project Setup | high | pending | None |\n| 2 | Implement User Authentication (Cognito) | high | pending | #1 |\n| 3 | Develop Core User Profile Management & Multi-Profile Logic | high | pending | #2 |\n| 4 | Implement Admin: Campus, Class, Subject Management | high | pending | #3 |\n| 5 | Implement Admin: Teacher & Student Assignment | medium | pending | #4 |\n| 6 | Implement Teacher: Class Access, Attendance & Daily Activities | medium | pending | #3, #5 |\n| 7 | Implement Teacher: Assessment & Results Publication | medium | pending | #6 |\n| 8 | Implement Parent: Attendance, Daily Diary & Results Access | medium | pending | #3, #6, #7 |\n| 9 | Implement Cross-Cutting Features: Communication & Leave Management | medium | pending | #3, #5, #6, #8 |\n| 10 | Implement Admin: Timetable, Transportation, Academic Activities, Fee Management & UI Integration | medium | pending | #4, #5, #9 |\n\n## Task Dependencies\n\nThe following diagram shows the task dependencies:\n\n```\nTask 2 depends on: Task 1\nTask 3 depends on: Task 2\nTask 4 depends on: Task 3\nTask 5 depends on: Task 4\nTask 6 depends on: Task 3, Task 5\nTask 7 depends on: Task 6\nTask 8 depends on: Task 3, Task 6, Task 7\nTask 9 depends on: Task 3, Task 5, Task 6, Task 8\nTask 10 depends on: Task 4, Task 5, Task 9\n```\n",
      "metadata": {
        "generated_from": "task_master",
        "tasks_count": 10,
        "generation_timestamp": "2025-06-19T10:58:34.143723",
        "is_primary": true
      },
      "status": "generated",
      "created_at": "2025-06-19T10:58:34.143723",
      "updated_at": "2025-06-19T10:58:34.143723"
    },
    "18": {
      "id": "overview_proj_1750308664554_vnllv97tt_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "project_overview",
      "file_name": "ProjectOverview.md",
      "content": "# Project Overview\n\nGenerated from Task Master on 2025-06-19 14:15:57\n\n## Summary\n\nThis project consists of 20 main tasks generated from the Product Requirements Document (PRD).\n\n## Task Breakdown\n\n### High Priority Tasks\n\n- **Task 11**: Backend Infrastructure Setup (Amplify & Serverless)\n- **Task 12**: User Authentication (Cognito & Amplify Auth)\n- **Task 13**: Core User Profile & Multi-Profile Management\n- **Task 14**: Flutter App Setup & Authentication UI\n- **Task 15**: Flutter Profile Selection & Creation UI\n- **Task 16**: Admin Dashboard & Campus Management\n- **Task 17**: Academic Year & Class/Subject Management (Admin)\n- **Task 18**: Teacher & Student Assignment (Admin)\n- **Task 19**: Teacher Dashboard & Class Access\n- **Task 20**: Parent Dashboard & Child Association\n- **Task 30**: Deployment & Monitoring\n\n### Medium Priority Tasks\n\n- **Task 21**: Attendance Management (Teacher & Parent)\n- **Task 22**: Daily Activities & Homework (Teacher & Parent)\n- **Task 23**: Assessment & Results Publication (Teacher & Parent)\n- **Task 24**: Communication System (Notifications)\n- **Task 25**: Leave Management (All Roles)\n- **Task 26**: Timetable Management (Admin & Parent)\n- **Task 27**: Transportation Management (Admin)\n- **Task 28**: Academic Activities Management (Admin)\n- **Task 29**: Fee Management (Admin & Parent)\n\n## Implementation Notes\n\nEach task has been designed to be atomic and focused on a single responsibility. Tasks are ordered logically considering dependencies and implementation sequence.\n\nFor detailed information about each task, refer to the individual task files.\n",
      "metadata": {
        "generated_from": "task_master",
        "tasks_count": 20,
        "generation_timestamp": "2025-06-19T14:15:57.252101",
        "is_primary": true
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.252101",
      "updated_at": "2025-06-19T14:15:57.252101"
    },
    "19": {
      "id": "task_proj_1750308664554_vnllv97tt_11_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_011_Backend_Infrastructure_Setup_(Amplify_&_Serverless).md",
      "content": "# Task 11: Backend Infrastructure Setup (Amplify & Serverless)\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: None\n\n## Description\n\nSet up the foundational AWS infrastructure using AWS Amplify and Serverless Framework, including project initialization, configuration for backend services like API Gateway, Lambda, and DynamoDB.\n\n## Implementation Details\n\nInitialize AWS Amplify project in the root directory. Configure `amplify-cli` (version 12.x or later) and `serverless-framework` (version 3.x or later). Define initial AWS resources using Amplify CLI for authentication and basic API. For custom logic, use Serverless Framework to define Lambda functions and API Gateway endpoints. Ensure proper IAM roles and permissions are set up for Lambda functions to interact with DynamoDB. Use `serverless.yml` to define API Gateway routes and Lambda functions. Example: `amplify init`, `amplify add api` (REST API with Lambda), `amplify push`. For custom Lambdas, create a `serverless.yml` in a `backend` directory.\n\n## Test Strategy\n\nVerify Amplify project is initialized correctly. Deploy a simple 'hello world' Lambda function via Serverless Framework and test its API Gateway endpoint using `curl` or Postman. Confirm DynamoDB tables can be created and accessed by Lambda.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 11,
        "task_title": "Backend Infrastructure Setup (Amplify & Serverless)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T14:15:57.281000",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.281000",
      "updated_at": "2025-06-19T14:15:57.281000"
    },
    "20": {
      "id": "task_proj_1750308664554_vnllv97tt_12_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_012_User_Authentication_(Cognito_&_Amplify_Auth).md",
      "content": "# Task 12: User Authentication (Cognito & Amplify Auth)\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 11\n\n## Description\n\nImplement user registration, login, and password reset functionalities using AWS Cognito, integrated via AWS Amplify Auth.\n\n## Implementation Details\n\nConfigure AWS Cognito User Pool and Identity Pool via `amplify add auth`. Set up email/password authentication. Implement user registration (`Amplify.Auth.signUp`), login (`Amplify.Auth.signIn`), and password reset (`Amplify.Auth.resetPassword`, `Amplify.Auth.confirmResetPassword`) in the backend. Ensure email verification is enabled for new registrations. Use `amplify push` to deploy Cognito resources.\n\n## Test Strategy\n\nTest user registration with valid and invalid inputs. Verify successful login and session management. Test password reset flow end-to-end, including email delivery and confirmation. Check Cognito User Pool for created users and their statuses.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 12,
        "task_title": "User Authentication (Cognito & Amplify Auth)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          11
        ],
        "generation_timestamp": "2025-06-19T14:15:57.290346",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.290346",
      "updated_at": "2025-06-19T14:15:57.290346"
    },
    "21": {
      "id": "task_proj_1750308664554_vnllv97tt_13_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_013_Core_User_Profile_&_Multi-Profile_Management.md",
      "content": "# Task 13: Core User Profile & Multi-Profile Management\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 11, Task 12\n\n## Description\n\nDesign and implement the DynamoDB schema for user profiles, including support for multiple profile types (Admin, Teacher, Parent) per user. Develop Lambda functions for CRUD operations on these profiles.\n\n## Implementation Details\n\nDesign a single DynamoDB table (e.g., `UserProfiles`) using a single-table design pattern. Partition key: `PK` (e.g., `USER#<cognitoUserId>`), Sort key: `SK` (e.g., `PROFILE#<profileId>`). Attributes: `profileType` (Admin, Teacher, Parent), `campusId`, `details` (JSON object for specific profile data). Implement Lambda functions (e.g., `createProfile`, `getProfiles`, `updateProfile`, `deleteProfile`) exposed via API Gateway. These Lambdas will interact with DynamoDB using the AWS SDK for JavaScript (v3). Use `serverless.yml` to define these functions and their API endpoints.\n\n## Test Strategy\n\nCreate multiple profiles for a single user (e.g., Admin and Teacher). Verify that all profiles are stored correctly in DynamoDB. Test CRUD operations for profiles via API Gateway endpoints using Postman or `curl`. Ensure proper authorization checks are in place for profile management.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 13,
        "task_title": "Core User Profile & Multi-Profile Management",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          11,
          12
        ],
        "generation_timestamp": "2025-06-19T14:15:57.299693",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.299693",
      "updated_at": "2025-06-19T14:15:57.299693"
    },
    "22": {
      "id": "task_proj_1750308664554_vnllv97tt_14_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_014_Flutter_App_Setup_&_Authentication_UI.md",
      "content": "# Task 14: Flutter App Setup & Authentication UI\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 12\n\n## Description\n\nInitialize the Flutter project and integrate AWS Amplify. Build the user interface for registration and login screens.\n\n## Implementation Details\n\nCreate a new Flutter project (`flutter create campus_pilot`). Add `amplify_flutter` (version 1.x or later) and `amplify_auth_cognito` dependencies to `pubspec.yaml`. Configure Amplify in `main.dart` using `Amplify.addPlugin` and `Amplify.configure`. Implement Flutter UI for user registration (email, password, name fields) and login (email, password fields). Use `flutter_bloc` or `riverpod` for state management to handle authentication flows and display loading/error states. Ensure secure storage of tokens (Amplify handles this by default).\n\n## Test Strategy\n\nRun the Flutter app on an emulator/device. Test user registration and login through the UI. Verify successful redirection upon login. Test error handling for invalid credentials or network issues. Ensure user sessions persist across app restarts.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 14,
        "task_title": "Flutter App Setup & Authentication UI",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          12
        ],
        "generation_timestamp": "2025-06-19T14:15:57.308365",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.308365",
      "updated_at": "2025-06-19T14:15:57.308365"
    },
    "23": {
      "id": "task_proj_1750308664554_vnllv97tt_15_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_015_Flutter_Profile_Selection_&_Creation_UI.md",
      "content": "# Task 15: Flutter Profile Selection & Creation UI\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 13, Task 14\n\n## Description\n\nDevelop the Flutter UI and logic for users to select an existing profile upon login or create new profiles (Admin, Teacher, Parent) if none exist. Implement automatic redirection to the selected profile's dashboard.\n\n## Implementation Details\n\nAfter successful login, query the backend (Lambda via API Gateway) to fetch existing profiles for the user. If profiles exist, display a list for selection. If no profiles, present options to create new profiles (Admin, Teacher, Parent) with required fields (campus, name, etc.). Store the selected profile ID locally (e.g., using `shared_preferences` or `flutter_secure_storage`) for automatic redirection. Implement navigation using `go_router` to redirect to the appropriate dashboard based on the selected profile type. Use `Amplify.Auth.getCurrentUser()` to get the Cognito User ID for profile lookup.\n\n## Test Strategy\n\nTest login with users having multiple profiles, single profile, and no profiles. Verify correct UI presentation for each scenario. Ensure automatic redirection to the selected profile's dashboard upon app reopening. Test creation of new profiles and their persistence.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 15,
        "task_title": "Flutter Profile Selection & Creation UI",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          13,
          14
        ],
        "generation_timestamp": "2025-06-19T14:15:57.318107",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.318107",
      "updated_at": "2025-06-19T14:15:57.318107"
    },
    "24": {
      "id": "task_proj_1750308664554_vnllv97tt_16_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_016_Admin_Dashboard_&_Campus_Management.md",
      "content": "# Task 16: Admin Dashboard & Campus Management\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 13, Task 15\n\n## Description\n\nDevelop the Admin dashboard UI and implement backend logic for setting up and configuring campus-specific settings.\n\n## Implementation Details\n\nCreate the main Admin dashboard UI in Flutter, displaying navigation options for various admin capabilities. Implement DynamoDB schema for `Campus` (PK: `CAMPUS#<campusId>`, SK: `METADATA`). Develop Lambda functions for CRUD operations on campus settings (e.g., `createCampus`, `getCampusDetails`, `updateCampusSettings`). These Lambdas should be secured using Cognito Authorizers on API Gateway to ensure only authenticated Admin users can access them. Implement Flutter forms and display components for campus setup and configuration.\n\n## Test Strategy\n\nLog in as an Admin. Verify access to the Admin dashboard. Test creating a new campus, updating its settings, and viewing details. Ensure data persistence in DynamoDB. Verify unauthorized users cannot access campus management features.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 16,
        "task_title": "Admin Dashboard & Campus Management",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          13,
          15
        ],
        "generation_timestamp": "2025-06-19T14:15:57.326687",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.326687",
      "updated_at": "2025-06-19T14:15:57.327639"
    },
    "25": {
      "id": "task_proj_1750308664554_vnllv97tt_17_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_017_Academic_Year_&_Class/Subject_Management_(Admin).md",
      "content": "# Task 17: Academic Year & Class/Subject Management (Admin)\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 16\n\n## Description\n\nImplement the Admin capabilities to define the academic year structure and manage the creation of classes (with sections) and subjects.\n\n## Implementation Details\n\nExtend DynamoDB schema for `AcademicYear` (PK: `CAMPUS#<campusId>`, SK: `ACADEMIC_YEAR#<year>`) and `Classes` (PK: `CAMPUS#<campusId>`, SK: `CLASS#<classId>`). Classes should include sections (e.g., 'A', 'B'). `Subjects` (PK: `CAMPUS#<campusId>`, SK: `SUBJECT#<subjectId>`). Develop Lambda functions for CRUD operations on academic years, classes, and subjects. Implement Flutter UI for Admin to define academic years (start/end dates), create classes (e.g., '1st Standard', '2nd Standard') with sections, and add subjects (e.g., 'Mathematics', 'Science').\n\n## Test Strategy\n\nAs Admin, create an academic year. Create multiple classes with different sections. Add various subjects. Verify all data is correctly stored and retrieved. Test update and delete functionalities for these entities.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 17,
        "task_title": "Academic Year & Class/Subject Management (Admin)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          16
        ],
        "generation_timestamp": "2025-06-19T14:15:57.336288",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.336288",
      "updated_at": "2025-06-19T14:15:57.336288"
    },
    "26": {
      "id": "task_proj_1750308664554_vnllv97tt_18_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_018_Teacher_&_Student_Assignment_(Admin).md",
      "content": "# Task 18: Teacher & Student Assignment (Admin)\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 17\n\n## Description\n\nEnable Admin to assign active teachers to subjects and classes, designate a single class teacher per class, and assign students to classes for the academic year.\n\n## Implementation Details\n\nUpdate DynamoDB schema to link teachers, students, classes, and subjects. For example, `ClassAssignments` (PK: `CLASS#<classId>`, SK: `TEACHER#<teacherId>` or `STUDENT#<studentId>`). Add attributes for `isClassTeacher` and `subjectId`. Develop Lambda functions for assigning teachers to subjects/classes, setting class teachers (ensure uniqueness per class), and assigning students to classes. Implement Flutter UI for Admin to select from lists of available teachers/students and assign them to specific classes/subjects. Use dropdowns and multi-select components.\n\n## Test Strategy\n\nAs Admin, assign multiple teachers to different subjects/classes. Designate one teacher as a class teacher for a specific class and verify no other teacher can be assigned as class teacher for the same class. Assign students to classes. Verify all assignments are correctly reflected in the database and accessible for other roles.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 18,
        "task_title": "Teacher & Student Assignment (Admin)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          17
        ],
        "generation_timestamp": "2025-06-19T14:15:57.347001",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.347001",
      "updated_at": "2025-06-19T14:15:57.347001"
    },
    "27": {
      "id": "task_proj_1750308664554_vnllv97tt_19_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_019_Teacher_Dashboard_&_Class_Access.md",
      "content": "# Task 19: Teacher Dashboard & Class Access\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 13, Task 15, Task 18\n\n## Description\n\nDevelop the Teacher dashboard UI, implement logic for teachers to access their assigned classes and subjects, and enable them to approve students into classes.\n\n## Implementation Details\n\nCreate the Teacher dashboard UI in Flutter. Upon login, fetch the teacher's assigned classes and subjects from the backend (Lambda via API Gateway, querying `ClassAssignments` table). Display these assignments clearly. Implement the 'Student Approval' feature: Teachers should see a list of pending student requests for their assigned classes and have options to approve or reject them. This involves updating the student's status in the `ClassAssignments` table. Ensure proper authorization so teachers can only see and approve students for their assigned classes.\n\n## Test Strategy\n\nLog in as a Teacher. Verify that only assigned classes and subjects are visible. Simulate a student requesting to join a class and verify the teacher can see and approve/reject the request. Check database for updated student status.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 19,
        "task_title": "Teacher Dashboard & Class Access",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          13,
          15,
          18
        ],
        "generation_timestamp": "2025-06-19T14:15:57.356624",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.356624",
      "updated_at": "2025-06-19T14:15:57.356624"
    },
    "28": {
      "id": "task_proj_1750308664554_vnllv97tt_20_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_020_Parent_Dashboard_&_Child_Association.md",
      "content": "# Task 20: Parent Dashboard & Child Association\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 13, Task 15\n\n## Description\n\nDevelop the Parent dashboard UI and implement the functionality for parents to associate their children with their profiles.\n\n## Implementation Details\n\nCreate the Parent dashboard UI in Flutter. Implement a mechanism for parents to link their children's profiles to their own. This could involve parents entering a unique student ID or a verification code provided by the school. The backend Lambda function would then verify this information and establish a link in DynamoDB (e.g., `ParentChildLink` table: PK: `PARENT#<parentId>`, SK: `CHILD#<childId>`). Ensure a parent can associate multiple children. Display the associated children on the parent dashboard.\n\n## Test Strategy\n\nLog in as a Parent. Test associating one or more children using the provided mechanism. Verify that the associated children appear on the dashboard. Ensure a child can only be associated with one parent account (or primary guardian). Check database for correct parent-child linkages.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 20,
        "task_title": "Parent Dashboard & Child Association",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          13,
          15
        ],
        "generation_timestamp": "2025-06-19T14:15:57.366937",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.366937",
      "updated_at": "2025-06-19T14:15:57.366937"
    },
    "29": {
      "id": "task_proj_1750308664554_vnllv97tt_21_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_021_Attendance_Management_(Teacher_&_Parent).md",
      "content": "# Task 21: Attendance Management (Teacher & Parent)\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 18, Task 19, Task 20\n\n## Description\n\nImplement student attendance management for teachers using a weekly calendar, allowing them to mark absent students. Also, enable parents to view their child's daily and overall attendance percentage.\n\n## Implementation Details\n\nFor Teachers: Implement a weekly calendar UI. When a date is selected, fetch the list of students in the teacher's assigned class. All students should be marked 'present' by default in the UI. Teachers can uncheck students to mark them 'absent'. On submission, a Lambda function updates the `Attendance` DynamoDB table (PK: `CLASS#<classId>#DATE#<date>`, SK: `STUDENT#<studentId>`). For Parents: Implement a UI to view daily attendance for their child using a weekly calendar. Display overall attendance percentage. Lambda functions will query the `Attendance` table to provide this data.\n\n## Test Strategy\n\nAs a Teacher, mark attendance for a class on various dates, including marking some students absent. As a Parent, verify accurate daily attendance and overall percentage for their child. Test edge cases like holidays or no attendance marked.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 21,
        "task_title": "Attendance Management (Teacher & Parent)",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          18,
          19,
          20
        ],
        "generation_timestamp": "2025-06-19T14:15:57.376353",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.376353",
      "updated_at": "2025-06-19T14:15:57.376353"
    },
    "30": {
      "id": "task_proj_1750308664554_vnllv97tt_22_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_022_Daily_Activities_&_Homework_(Teacher_&_Parent).md",
      "content": "# Task 22: Daily Activities & Homework (Teacher & Parent)\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 19, Task 20\n\n## Description\n\nEnable teachers to create tasks and homework entries in a daily diary. Allow parents to view these daily diary entries, including teacher notes and observations.\n\n## Implementation Details\n\nFor Teachers: Implement a 'Daily Diary' feature. Teachers can select a date from a weekly calendar and add entries for tasks, homework, and general observations. Store these in a `DailyDiary` DynamoDB table (PK: `CLASS#<classId>#DATE#<date>`, SK: `ENTRY#<entryId>`). For Parents: Implement a UI to view daily diary entries for their child's class, using a weekly calendar to select dates. Display teacher notes and observations. Lambda functions will handle CRUD for teachers and read-only access for parents.\n\n## Test Strategy\n\nAs a Teacher, create multiple daily diary entries for different dates and classes. As a Parent, verify that the daily diary entries for their child's class are visible and accurate. Test viewing entries for dates with no activities.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 22,
        "task_title": "Daily Activities & Homework (Teacher & Parent)",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          19,
          20
        ],
        "generation_timestamp": "2025-06-19T14:15:57.388468",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.388468",
      "updated_at": "2025-06-19T14:15:57.388468"
    },
    "31": {
      "id": "task_proj_1750308664554_vnllv97tt_23_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_023_Assessment_&_Results_Publication_(Teacher_&_Parent).md",
      "content": "# Task 23: Assessment & Results Publication (Teacher & Parent)\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 19, Task 20\n\n## Description\n\nImplement functionality for teachers to mark and grade tasks/exams and publish quarterly/half-yearly exam results. Allow parents to monitor these published results.\n\n## Implementation Details\n\nFor Teachers: Implement an 'Assessment' module. Teachers can select a class/subject, define assessments (e.g., 'Mid-term Exam', 'Homework 1'), and enter grades for each student. Store grades in a `Grades` DynamoDB table (PK: `ASSESSMENT#<assessmentId>`, SK: `STUDENT#<studentId>`). Implement 'Results Publication' for quarterly/half-yearly exams, which aggregates grades and marks them as 'published'. For Parents: Implement a 'Results Monitoring' UI where parents can view published results for their child across different subjects and assessments. Lambda functions will manage grade entry and result aggregation/publication.\n\n## Test Strategy\n\nAs a Teacher, enter grades for students in a class. Publish a set of results (e.g., quarterly). As a Parent, verify that the published results for their child are visible and correct. Test grade updates and re-publication.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 23,
        "task_title": "Assessment & Results Publication (Teacher & Parent)",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          19,
          20
        ],
        "generation_timestamp": "2025-06-19T14:15:57.400524",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.400524",
      "updated_at": "2025-06-19T14:15:57.400524"
    },
    "32": {
      "id": "task_proj_1750308664554_vnllv97tt_24_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_024_Communication_System_(Notifications).md",
      "content": "# Task 24: Communication System (Notifications)\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 13, Task 16, Task 19, Task 20\n\n## Description\n\nDevelop a communication system allowing Admin to send notifications to all parents/students, specific groups (teachers, specific class), or individuals. Teachers can send notifications to their class or individual students. All users can view notification details.\n\n## Implementation Details\n\nImplement a `Notifications` DynamoDB table (PK: `NOTIFICATION#<notificationId>`, SK: `TARGET#<targetType>#<targetId>`). `targetType` can be 'ALL_CAMPUS', 'TEACHER', 'CLASS', 'STUDENT', 'PARENT'. Develop Lambda functions for sending notifications: Admin can target various groups/individuals. Teachers can target their assigned classes or individual students within those classes. Implement Flutter UI for composing and sending notifications (Admin, Teacher) and a unified 'Notifications' inbox for all users to view details. Use AWS SNS for push notifications if mobile push is required, otherwise, simple in-app notification storage and retrieval.\n\n## Test Strategy\n\nAs Admin, send notifications to all parents, all teachers, a specific class, and an individual student. As a Teacher, send notifications to your class and an individual student. Verify that notifications are received by the intended recipients and not by others. Test viewing notification details for all roles.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 24,
        "task_title": "Communication System (Notifications)",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          13,
          16,
          19,
          20
        ],
        "generation_timestamp": "2025-06-19T14:15:57.409101",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.409101",
      "updated_at": "2025-06-19T14:15:57.409101"
    },
    "33": {
      "id": "task_proj_1750308664554_vnllv97tt_25_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_025_Leave_Management_(All_Roles).md",
      "content": "# Task 25: Leave Management (All Roles)\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 13, Task 16, Task 19, Task 20\n\n## Description\n\nImplement a leave management system where teachers and parents/students can submit leave requests. Admin and class teachers can approve or reject these requests with reasons.\n\n## Implementation Details\n\nImplement a `LeaveRequests` DynamoDB table (PK: `REQUEST#<requestId>`, SK: `USER#<userId>`). Attributes: `requestorType`, `reason`, `startDate`, `endDate`, `status` (Pending, Approved, Rejected), `approverId`, `approverReason`. For Teachers and Parents: Implement Flutter UI to submit leave requests for themselves or their child. For Admin and Class Teachers: Implement UI to view pending leave requests and approve/reject them with a reason. Lambda functions will handle submission, status updates, and retrieval of requests. Ensure class teachers can only approve/reject leave for students in their class.\n\n## Test Strategy\n\nAs a Teacher, submit a personal leave request. As a Parent, submit a leave request for their child. As Admin, approve/reject a teacher's leave request. As a Class Teacher, approve/reject a student's leave request. Verify status updates and reasons are correctly recorded and visible to the requestor.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 25,
        "task_title": "Leave Management (All Roles)",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          13,
          16,
          19,
          20
        ],
        "generation_timestamp": "2025-06-19T14:15:57.419029",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.419029",
      "updated_at": "2025-06-19T14:15:57.419029"
    },
    "34": {
      "id": "task_proj_1750308664554_vnllv97tt_26_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_026_Timetable_Management_(Admin_&_Parent).md",
      "content": "# Task 26: Timetable Management (Admin & Parent)\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 16, Task 18, Task 20\n\n## Description\n\nEnable Admin to generate and manage timetables for the academic year. Allow parents to view their child's timetable.\n\n## Implementation Details\n\nFor Admin: Implement a `Timetable` DynamoDB table (PK: `CLASS#<classId>#ACADEMIC_YEAR#<year>`, SK: `DAY#<dayOfWeek>#SLOT#<slotNumber>`). Attributes: `subjectId`, `teacherId`, `room`. Develop Lambda functions for Admin to create, update, and delete timetable entries. The UI should provide a grid-like interface for timetable generation. For Parents: Implement a UI to view their child's timetable based on their assigned class. Lambda functions will retrieve the relevant timetable data.\n\n## Test Strategy\n\nAs Admin, create a comprehensive timetable for a class. As a Parent, verify that their child's timetable is accurately displayed. Test updates to the timetable by Admin and ensure parents see the updated version.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 26,
        "task_title": "Timetable Management (Admin & Parent)",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          16,
          18,
          20
        ],
        "generation_timestamp": "2025-06-19T14:15:57.429833",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.429833",
      "updated_at": "2025-06-19T14:15:57.429833"
    },
    "35": {
      "id": "task_proj_1750308664554_vnllv97tt_27_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_027_Transportation_Management_(Admin).md",
      "content": "# Task 27: Transportation Management (Admin)\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 16\n\n## Description\n\nImplement Admin capabilities to manage transportation routes, stops, driver information, and schedules for the academic year.\n\n## Implementation Details\n\nImplement DynamoDB tables for `Routes` (PK: `ROUTE#<routeId>`), `Stops` (PK: `STOP#<stopId>`, SK: `ROUTE#<routeId>`), `Drivers` (PK: `DRIVER#<driverId>`), and `Schedules` (PK: `SCHEDULE#<scheduleId>`, SK: `ROUTE#<routeId>#TIME#<time>`). Develop Lambda functions for CRUD operations on these entities. Implement Flutter UI for Admin to add/edit routes, define stops along routes, manage driver details (name, contact), and create schedules linking routes, drivers, and times. Consider linking students to routes/stops if required by future features.\n\n## Test Strategy\n\nAs Admin, create new transportation routes, add stops to routes, register drivers, and set up schedules. Verify all data is correctly stored and retrieved. Test update and delete functionalities for all transportation entities.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 27,
        "task_title": "Transportation Management (Admin)",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          16
        ],
        "generation_timestamp": "2025-06-19T14:15:57.439790",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.439790",
      "updated_at": "2025-06-19T14:15:57.439790"
    },
    "36": {
      "id": "task_proj_1750308664554_vnllv97tt_28_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_028_Academic_Activities_Management_(Admin).md",
      "content": "# Task 28: Academic Activities Management (Admin)\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 16\n\n## Description\n\nEnable Admin to manage exam timetables, define holidays, and plan other academic activities for the year.\n\n## Implementation Details\n\nImplement DynamoDB tables for `ExamTimetables` (PK: `CAMPUS#<campusId>#ACADEMIC_YEAR#<year>`, SK: `EXAM#<examId>`), `Holidays` (PK: `CAMPUS#<campusId>#ACADEMIC_YEAR#<year>`, SK: `HOLIDAY#<date>`), and `AcademicActivities` (PK: `CAMPUS#<campusId>#ACADEMIC_YEAR#<year>`, SK: `ACTIVITY#<activityId>`). Develop Lambda functions for CRUD operations. Implement Flutter UI for Admin to define exam schedules (date, time, subject, class), add holidays, and plan other academic events (e.g., sports day, annual function).\n\n## Test Strategy\n\nAs Admin, create an exam timetable for a class, add several holidays, and plan a new academic activity. Verify all entries are correctly stored and retrieved. Ensure these are visible to relevant users (e.g., parents viewing academic calendar).\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 28,
        "task_title": "Academic Activities Management (Admin)",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          16
        ],
        "generation_timestamp": "2025-06-19T14:15:57.450244",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.450244",
      "updated_at": "2025-06-19T14:15:57.450244"
    },
    "37": {
      "id": "task_proj_1750308664554_vnllv97tt_29_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_029_Fee_Management_(Admin_&_Parent).md",
      "content": "# Task 29: Fee Management (Admin & Parent)\n\n## Overview\n\n**Priority**: Medium  \n**Status**: Pending  \n**Dependencies**: Task 16, Task 20\n\n## Description\n\nImplement Admin functionality to add fee structures and breakdowns for each class with due dates. Allow parents to view fee structure and due dates for their child.\n\n## Implementation Details\n\nFor Admin: Implement a `FeeStructure` DynamoDB table (PK: `CLASS#<classId>#ACADEMIC_YEAR#<year>`, SK: `FEE_ITEM#<itemId>`). Attributes: `description`, `amount`, `dueDate`. Develop Lambda functions for Admin to define fee components for each class and set due dates. Implement Flutter UI for Admin to manage these fee structures. For Parents: Implement a UI where parents can view the fee structure and upcoming due dates for their child's class. Lambda functions will retrieve this information based on the child's class assignment.\n\n## Test Strategy\n\nAs Admin, define a fee structure for a specific class with multiple fee items and due dates. As a Parent, verify that the correct fee structure and due dates are displayed for their child. Test updates to fee structure by Admin and ensure parents see the latest information.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 29,
        "task_title": "Fee Management (Admin & Parent)",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          16,
          20
        ],
        "generation_timestamp": "2025-06-19T14:15:57.459855",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.459855",
      "updated_at": "2025-06-19T14:15:57.459855"
    },
    "38": {
      "id": "task_proj_1750308664554_vnllv97tt_30_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_030_Deployment_&_Monitoring.md",
      "content": "# Task 30: Deployment & Monitoring\n\n## Overview\n\n**Priority**: High  \n**Status**: Pending  \n**Dependencies**: Task 11, Task 12, Task 13, Task 14, Task 15, Task 16, Task 17, Task 18, Task 19, Task 20, Task 21, Task 22, Task 23, Task 24, Task 25, Task 26, Task 27, Task 28, Task 29\n\n## Description\n\nSet up Continuous Integration/Continuous Deployment (CI/CD) pipelines for both Flutter frontend and Serverless backend. Implement logging and monitoring for the deployed services.\n\n## Implementation Details\n\nSet up CI/CD using AWS CodePipeline or GitHub Actions. For Flutter: Configure pipeline to build, test, and deploy to Firebase App Distribution or AWS Device Farm for testing, and eventually to App Store/Play Store. For Serverless backend: Configure pipeline to deploy Lambda functions and API Gateway using Serverless Framework. Implement centralized logging using AWS CloudWatch Logs for all Lambda functions. Set up CloudWatch Alarms for critical errors or performance issues. Consider AWS X-Ray for distributed tracing. Ensure proper environment variable management for different stages (dev, staging, prod).\n\n## Test Strategy\n\nTrigger a code change in both frontend and backend repositories. Verify that CI/CD pipelines run successfully and deploy changes. Check CloudWatch Logs for Lambda execution logs. Simulate errors and verify CloudWatch Alarms trigger as expected. Monitor API Gateway and Lambda metrics for performance.\n\n## Acceptance Criteria\n\n- [ ] Task implementation is complete\n- [ ] Code follows project standards\n- [ ] Tests are written and passing\n- [ ] Documentation is updated\n- [ ] Code review is completed\n\n---\n\n*Generated by Task Master on 2025-06-19 14:15:57*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 30,
        "task_title": "Deployment & Monitoring",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29
        ],
        "generation_timestamp": "2025-06-19T14:15:57.468834",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.468834",
      "updated_at": "2025-06-19T14:15:57.468834"
    },
    "39": {
      "id": "tasks_index_proj_1750308664554_vnllv97tt_1750322757",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "tasks_index",
      "file_name": "Tasks_Index.md",
      "content": "# Tasks Index\n\nGenerated on 2025-06-19 14:15:57\n\nTotal Tasks: 20\n\n## Task List\n\n| ID | Title | Priority | Status | Dependencies |\n|----|-------|----------|--------|--------------|\n| 11 | Backend Infrastructure Setup (Amplify & Serverless) | high | pending | None |\n| 12 | User Authentication (Cognito & Amplify Auth) | high | pending | #11 |\n| 13 | Core User Profile & Multi-Profile Management | high | pending | #11, #12 |\n| 14 | Flutter App Setup & Authentication UI | high | pending | #12 |\n| 15 | Flutter Profile Selection & Creation UI | high | pending | #13, #14 |\n| 16 | Admin Dashboard & Campus Management | high | pending | #13, #15 |\n| 17 | Academic Year & Class/Subject Management (Admin) | high | pending | #16 |\n| 18 | Teacher & Student Assignment (Admin) | high | pending | #17 |\n| 19 | Teacher Dashboard & Class Access | high | pending | #13, #15, #18 |\n| 20 | Parent Dashboard & Child Association | high | pending | #13, #15 |\n| 21 | Attendance Management (Teacher & Parent) | medium | pending | #18, #19, #20 |\n| 22 | Daily Activities & Homework (Teacher & Parent) | medium | pending | #19, #20 |\n| 23 | Assessment & Results Publication (Teacher & Parent) | medium | pending | #19, #20 |\n| 24 | Communication System (Notifications) | medium | pending | #13, #16, #19, #20 |\n| 25 | Leave Management (All Roles) | medium | pending | #13, #16, #19, #20 |\n| 26 | Timetable Management (Admin & Parent) | medium | pending | #16, #18, #20 |\n| 27 | Transportation Management (Admin) | medium | pending | #16 |\n| 28 | Academic Activities Management (Admin) | medium | pending | #16 |\n| 29 | Fee Management (Admin & Parent) | medium | pending | #16, #20 |\n| 30 | Deployment & Monitoring | high | pending | #11, #12, #13, #14, #15, #16, #17, #18, #19, #20, #21, #22, #23, #24, #25, #26, #27, #28, #29 |\n\n## Task Dependencies\n\nThe following diagram shows the task dependencies:\n\n```\nTask 12 depends on: Task 11\nTask 13 depends on: Task 11, Task 12\nTask 14 depends on: Task 12\nTask 15 depends on: Task 13, Task 14\nTask 16 depends on: Task 13, Task 15\nTask 17 depends on: Task 16\nTask 18 depends on: Task 17\nTask 19 depends on: Task 13, Task 15, Task 18\nTask 20 depends on: Task 13, Task 15\nTask 21 depends on: Task 18, Task 19, Task 20\nTask 22 depends on: Task 19, Task 20\nTask 23 depends on: Task 19, Task 20\nTask 24 depends on: Task 13, Task 16, Task 19, Task 20\nTask 25 depends on: Task 13, Task 16, Task 19, Task 20\nTask 26 depends on: Task 16, Task 18, Task 20\nTask 27 depends on: Task 16\nTask 28 depends on: Task 16\nTask 29 depends on: Task 16, Task 20\nTask 30 depends on: Task 11, Task 12, Task 13, Task 14, Task 15, Task 16, Task 17, Task 18, Task 19, Task 20, Task 21, Task 22, Task 23, Task 24, Task 25, Task 26, Task 27, Task 28, Task 29\n```\n",
      "metadata": {
        "generated_from": "task_master",
        "tasks_count": 20,
        "generation_timestamp": "2025-06-19T14:15:57.480354",
        "is_primary": true
      },
      "status": "generated",
      "created_at": "2025-06-19T14:15:57.480354",
      "updated_at": "2025-06-19T14:15:57.480354"
    },
    "40": {
      "id": "overview_proj_1750308664554_vnllv97tt_1750329635",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "project_overview",
      "file_name": "ProjectOverview.md",
      "content": "# Project Overview\n\nGenerated from Task Master on 2025-06-19 16:10:35\n\n## Summary\n\nThis project consists of 30 main tasks generated from the Product Requirements Document (PRD).\n\n## Project Setup Checklist\n\n- [ ] Review all project requirements and constraints\n- [ ] Set up development environment\n- [ ] Initialize project repository\n- [ ] Configure development tools and dependencies\n- [ ] Set up testing framework\n- [ ] Configure CI/CD pipeline (if applicable)\n- [ ] Set up documentation structure\n\n## Task Breakdown Checklist\n\n### High Priority Tasks\n- [ ] **Task 31**: Implement Admin Profile Approval/Deactivation Backend\n- [ ] **Task 32**: Develop Admin UI for Profile Approval/Deactivation\n- [ ] **Task 37**: Implement Timetable Generation Logic (Admin)\n- [ ] **Task 38**: Develop Admin UI for Timetable Management\n- [ ] **Task 45**: Implement Teacher Student Approval Backend\n- [ ] **Task 46**: Develop Teacher UI for Student Approval\n- [ ] **Task 47**: Refine Attendance Marking Backend (Teacher)\n- [ ] **Task 48**: Develop Teacher UI for Weekly Attendance Marking\n- [ ] **Task 51**: Implement Assessment & Grading Backend (Teacher)\n- [ ] **Task 52**: Develop Teacher UI for Assessment & Grading\n- [ ] **Task 53**: Implement Results Publication Backend (Teacher)\n- [ ] **Task 54**: Develop Teacher UI for Results Publication\n\n### Medium Priority Tasks\n- [ ] **Task 33**: Implement Class Teacher Assignment Backend\n- [ ] **Task 34**: Develop Admin UI for Class Teacher Assignment\n- [ ] **Task 35**: Refine Academic Year Structure Management Backend\n- [ ] **Task 36**: Develop Admin UI for Academic Year Structure Management\n- [ ] **Task 39**: Implement Fee Structure Backend\n- [ ] **Task 40**: Develop Admin UI for Fee Structure Management\n- [ ] **Task 43**: Implement Academic Activities (Exams, Holidays) Backend\n- [ ] **Task 44**: Develop Admin UI for Academic Activities Management\n- [ ] **Task 49**: Implement Daily Diary Entry Backend (Teacher)\n- [ ] **Task 50**: Develop Teacher UI for Daily Diary Entries\n- [ ] **Task 55**: Refine Teacher Communication Backend (Targeted Notifications)\n- [ ] **Task 56**: Develop Teacher UI for Targeted Notifications\n- [ ] **Task 57**: Refine Parent Attendance Tracking UI\n- [ ] **Task 58**: Refine Parent Daily Diary Access UI\n- [ ] **Task 59**: Refine Parent Results Monitoring UI\n- [ ] **Task 60**: Refine Parent Fee Information & Due Dates UI\n\n### Low Priority Tasks\n- [ ] **Task 41**: Implement Transportation Management Backend\n- [ ] **Task 42**: Develop Admin UI for Transportation Management\n\n## Project Milestones Checklist\n\n- [ ] Phase 1: High priority tasks completed\n- [ ] Phase 2: Medium priority tasks completed\n- [ ] Phase 3: Low priority tasks completed\n- [ ] Integration testing completed\n- [ ] Performance testing completed\n- [ ] Security review completed\n- [ ] Documentation finalized\n- [ ] Code review completed\n- [ ] Deployment preparation completed\n- [ ] Project ready for release\n\n## Quality Assurance Checklist\n\n- [ ] All code follows project standards\n- [ ] All tests are passing\n- [ ] Code coverage meets requirements\n- [ ] No security vulnerabilities\n- [ ] Performance requirements met\n- [ ] Documentation is complete and accurate\n- [ ] All dependencies are up to date\n- [ ] Error handling is comprehensive\n\n## Implementation Notes\n\nEach task has been designed to be atomic and focused on a single responsibility. Tasks are ordered logically considering dependencies and implementation sequence.\n\nFor detailed information about each task, refer to the individual task files.\n",
      "metadata": {
        "generated_from": "task_master",
        "tasks_count": 30,
        "generation_timestamp": "2025-06-19T16:10:35.888002",
        "is_primary": true
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:35.888002",
      "updated_at": "2025-06-19T16:10:35.888002"
    },
    "41": {
      "id": "task_proj_1750308664554_vnllv97tt_31_1750329635",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_031_Implement_Admin_Profile_Approval/Deactivation_Backend.md",
      "content": "# Task 31: Implement Admin Profile Approval/Deactivation Backend\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nDevelop backend logic for administrators to approve or deactivate user profiles (teacher, parent). This builds upon the core user profile management.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Utilize AWS Lambda and DynamoDB. A new attribute 'status' (e.g., 'pending', 'approved', 'deactivated') should be added to the 'UserProfiles' DynamoDB table. Create an API Gateway endpoint that triggers a Lambda function (e.g., 'updateProfileStatus'). This Lambda function will validate the 'profileId' and 'newStatus' input, then update the 'status' field in the 'UserProfiles' table. Ensure proper authorization using AWS Cognito to restrict access to authenticated administrators.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda function to verify input validation and correct DynamoDB update logic. Integration tests via API Gateway to confirm that profile statuses are accurately changed in DynamoDB and that unauthorized access is denied.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:35*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 31,
        "task_title": "Implement Admin Profile Approval/Deactivation Backend",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:35.914986",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:35.914986",
      "updated_at": "2025-06-19T16:10:35.914986"
    },
    "42": {
      "id": "task_proj_1750308664554_vnllv97tt_32_1750329635",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_032_Develop_Admin_UI_for_Profile_Approval/Deactivation.md",
      "content": "# Task 32: Develop Admin UI for Profile Approval/Deactivation\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 31\n\n## Description\n\nCreate the Flutter UI for administrators to view pending profiles and approve/deactivate them, integrating with the backend API.\n\n## Dependencies Checklist\n- [ ] Ensure Task 31 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'AdminProfileManagementScreen') that displays a list of user profiles, showing their current approval status. Implement interactive elements (e.g., buttons, toggles) to allow administrators to change a profile's status. Integrate with AWS Amplify API to fetch profiles ('Amplify.API.query(request: GraphQLRequest(document: listProfilesQuery))') and update profile status ('Amplify.API.mutate(request: GraphQLRequest(document: updateProfileStatusMutation, variables: {id: profileId, status: newStatus}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the profile list and status control elements. Integration tests to verify successful API calls to the backend and correct UI updates based on backend responses. End-to-end test: An admin logs in, navigates to the profile management section, approves a pending profile, and verifies the status change is reflected in the UI and backend.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:35*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 32,
        "task_title": "Develop Admin UI for Profile Approval/Deactivation",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          31
        ],
        "generation_timestamp": "2025-06-19T16:10:35.929630",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:35.929630",
      "updated_at": "2025-06-19T16:10:35.929630"
    },
    "43": {
      "id": "task_proj_1750308664554_vnllv97tt_33_1750329635",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_033_Implement_Class_Teacher_Assignment_Backend.md",
      "content": "# Task 33: Implement Class Teacher Assignment Backend\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nDevelop backend logic for administrators to designate a teacher as a class representative (class teacher) for a specific class, ensuring only one class teacher per class.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Extend the 'Classes' DynamoDB table schema to include a 'classTeacherId' field. Create a Lambda function (e.g., 'assignClassTeacher') exposed via API Gateway. This function will accept 'classId' and 'teacherId' as input. It must validate that 'teacherId' corresponds to an active teacher and ensure that only one teacher can be assigned as a class teacher per class. Update the 'classTeacherId' in the 'Classes' table. Implement logic to handle re-assignments or un-assignments.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda function to verify input validation, uniqueness constraint enforcement, and correct DynamoDB updates. Integration tests via API Gateway to ensure accurate teacher assignment and proper handling of conflicts (e.g., trying to assign a second class teacher).\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:35*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 33,
        "task_title": "Implement Class Teacher Assignment Backend",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:35.940907",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:35.940907",
      "updated_at": "2025-06-19T16:10:35.940907"
    },
    "44": {
      "id": "task_proj_1750308664554_vnllv97tt_34_1750329635",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_034_Develop_Admin_UI_for_Class_Teacher_Assignment.md",
      "content": "# Task 34: Develop Admin UI for Class Teacher Assignment\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 33\n\n## Description\n\nCreate the Flutter UI for administrators to assign class teachers to specific classes.\n\n## Dependencies Checklist\n- [ ] Ensure Task 33 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'ClassTeacherAssignmentScreen') that allows administrators to select a class from a list and then choose an active teacher to assign as the class teacher. Integrate with AWS Amplify API to fetch lists of classes and teachers ('Amplify.API.query(request: GraphQLRequest(document: listClassesQuery))', 'Amplify.API.query(request: GraphQLRequest(document: listTeachersQuery))') and to submit the assignment ('Amplify.API.mutate(request: GraphQLRequest(document: assignClassTeacherMutation, variables: {classId: classId, teacherId: teacherId}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the class and teacher selection widgets. Integration tests to verify successful API calls and appropriate UI feedback (e.g., success messages, error handling). End-to-end test: An admin assigns a class teacher, and verifies the assignment is reflected in the system.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:35*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 34,
        "task_title": "Develop Admin UI for Class Teacher Assignment",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          33
        ],
        "generation_timestamp": "2025-06-19T16:10:35.952322",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:35.952322",
      "updated_at": "2025-06-19T16:10:35.952322"
    },
    "45": {
      "id": "task_proj_1750308664554_vnllv97tt_35_1750329635",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_035_Refine_Academic_Year_Structure_Management_Backend.md",
      "content": "# Task 35: Refine Academic Year Structure Management Backend\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nEnhance backend for defining academic year structure, including start/end dates and terms/semesters.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Create or extend a DynamoDB table (e.g., 'AcademicYears') with fields such as 'yearName', 'startDate', 'endDate', and a list of 'terms' (each term having 'name', 'startDate', 'endDate'). Develop Lambda functions for Create, Read, Update, and Delete (CRUD) operations on this table. These functions will be exposed via API Gateway to manage the academic year data.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda functions to ensure correct CRUD operations and data validation for academic year structures. Integration tests via API Gateway to confirm data persistence and accurate retrieval of academic year details.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:35*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 35,
        "task_title": "Refine Academic Year Structure Management Backend",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:35.963815",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:35.963815",
      "updated_at": "2025-06-19T16:10:35.963815"
    },
    "46": {
      "id": "task_proj_1750308664554_vnllv97tt_36_1750329635",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_036_Develop_Admin_UI_for_Academic_Year_Structure_Management.md",
      "content": "# Task 36: Develop Admin UI for Academic Year Structure Management\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 35\n\n## Description\n\nCreate the Flutter UI for administrators to define and manage academic year structures, including terms and semesters.\n\n## Dependencies Checklist\n- [ ] Ensure Task 35 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'AcademicYearManagementScreen') with forms to create and edit academic years. Include fields for year name, start date, end date, and a dynamic section to add multiple terms/semesters with their respective names and dates. Integrate with AWS Amplify API to perform CRUD operations on the academic year data ('Amplify.API.mutate(request: GraphQLRequest(document: createAcademicYearMutation, variables: {data}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the forms and data display elements. Integration tests to verify successful data submission and retrieval from the backend. End-to-end test: An admin creates a new academic year with terms, saves it, and verifies that the details are correctly displayed upon re-accessing the screen.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:35*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 36,
        "task_title": "Develop Admin UI for Academic Year Structure Management",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          35
        ],
        "generation_timestamp": "2025-06-19T16:10:35.974834",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:35.974834",
      "updated_at": "2025-06-19T16:10:35.974834"
    },
    "47": {
      "id": "task_proj_1750308664554_vnllv97tt_37_1750329635",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_037_Implement_Timetable_Generation_Logic_(Admin).md",
      "content": "# Task 37: Implement Timetable Generation Logic (Admin)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nDevelop backend logic for generating and managing timetables for the academic year, including conflict detection.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Create a DynamoDB table (e.g., 'Timetables') to store timetable entries, including fields like 'classId', 'dayOfWeek', 'startTime', 'endTime', 'subjectId', and 'teacherId'. Develop Lambda functions for CRUD operations on these entries. Crucially, implement server-side validation to detect and prevent timetable overlaps for both classes and individual teachers. This ensures that a teacher is not assigned to two classes at the same time, and a class does not have two subjects simultaneously.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda functions to verify timetable slot creation, update, and especially the conflict detection logic. Integration tests via API Gateway to ensure timetable entries are correctly stored, and that conflict scenarios (e.g., overlapping times for a teacher or class) are properly handled and rejected.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:35*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 37,
        "task_title": "Implement Timetable Generation Logic (Admin)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:35.986254",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:35.986254",
      "updated_at": "2025-06-19T16:10:35.986254"
    },
    "48": {
      "id": "task_proj_1750308664554_vnllv97tt_38_1750329635",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_038_Develop_Admin_UI_for_Timetable_Management.md",
      "content": "# Task 38: Develop Admin UI for Timetable Management\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 37\n\n## Description\n\nCreate the Flutter UI for administrators to generate, view, and manage timetables.\n\n## Dependencies Checklist\n- [ ] Ensure Task 37 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'TimetableManagementScreen') that provides a clear visual representation of the timetable, possibly using a grid or calendar view. Implement functionality for administrators to add, edit, and delete timetable slots. This could involve drag-and-drop functionality or form-based entry. Integrate with AWS Amplify API to interact with the timetable backend ('Amplify.API.mutate(request: GraphQLRequest(document: manageTimetableMutation, variables: {data}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the timetable grid/forms and interactive elements. Integration tests to verify successful API calls for adding, editing, and deleting timetable slots, and that the UI accurately reflects the backend state. End-to-end test: An admin creates a new timetable entry, verifies it's correctly displayed, and attempts to create a conflicting entry to ensure validation works on the UI side as well.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:35*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 38,
        "task_title": "Develop Admin UI for Timetable Management",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          37
        ],
        "generation_timestamp": "2025-06-19T16:10:35.996608",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:35.996608",
      "updated_at": "2025-06-19T16:10:35.996608"
    },
    "49": {
      "id": "task_proj_1750308664554_vnllv97tt_39_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_039_Implement_Fee_Structure_Backend.md",
      "content": "# Task 39: Implement Fee Structure Backend\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nDevelop backend logic for administrators to add fee structures and breakdowns for each class with due dates.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Create a DynamoDB table (e.g., 'FeeStructures') with fields such as 'classId', 'academicYearId', 'totalFee', a 'breakdown' (as a list of objects, each with 'itemName' and 'amount'), and 'dueDate'. Develop Lambda functions for CRUD operations on this table, exposed via API Gateway. These functions will handle the creation, retrieval, update, and deletion of fee structures associated with specific classes and academic years.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda functions to ensure correct CRUD operations on the 'FeeStructures' table, including proper handling of the fee breakdown and due dates. Integration tests via API Gateway to confirm that fee structure data is accurately persisted and retrieved from DynamoDB.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 39,
        "task_title": "Implement Fee Structure Backend",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:36.007889",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.007889",
      "updated_at": "2025-06-19T16:10:36.007889"
    },
    "50": {
      "id": "task_proj_1750308664554_vnllv97tt_40_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_040_Develop_Admin_UI_for_Fee_Structure_Management.md",
      "content": "# Task 40: Develop Admin UI for Fee Structure Management\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 39\n\n## Description\n\nCreate the Flutter UI for administrators to define and manage fee structures.\n\n## Dependencies Checklist\n- [ ] Ensure Task 39 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'FeeStructureManagementScreen') with forms that allow administrators to input detailed fee information. This includes selecting a class and academic year, entering the total fee, adding multiple breakdown items (e.g., 'Tuition Fee', 'Lab Fee'), and specifying due dates for each fee component. Integrate with AWS Amplify API to submit and retrieve fee structure data ('Amplify.API.mutate(request: GraphQLRequest(document: manageFeeStructureMutation, variables: {data}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the fee input forms and dynamic breakdown item addition. Integration tests to verify successful data submission and accurate display of fee structures. End-to-end test: An admin adds a new fee structure for a class, including breakdown and due dates, and verifies that all details are correctly saved and displayed.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 40,
        "task_title": "Develop Admin UI for Fee Structure Management",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          39
        ],
        "generation_timestamp": "2025-06-19T16:10:36.018500",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.018500",
      "updated_at": "2025-06-19T16:10:36.018500"
    },
    "51": {
      "id": "task_proj_1750308664554_vnllv97tt_41_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_041_Implement_Transportation_Management_Backend.md",
      "content": "# Task 41: Implement Transportation Management Backend\n\n## Overview\n\n**Priority**: Low\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nDevelop backend logic for managing transportation routes, stops, driver information, and schedules.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Create dedicated DynamoDB tables: 'Routes' (e.g., 'routeName', 'stops' list), 'Drivers' (e.g., 'driverName', 'contactInfo'), and 'VehicleSchedules' (e.g., 'routeId', 'vehicleId', 'driverId', 'scheduleTime'). Develop Lambda functions for CRUD operations on each of these tables, exposed via API Gateway. These functions will handle the creation, retrieval, update, and deletion of transportation-related data.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda functions to ensure correct CRUD operations across all transportation-related DynamoDB tables. Integration tests via API Gateway to confirm that transportation data (routes, drivers, schedules) is accurately persisted and retrieved.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 41,
        "task_title": "Implement Transportation Management Backend",
        "task_priority": "low",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:36.030237",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.030237",
      "updated_at": "2025-06-19T16:10:36.030237"
    },
    "52": {
      "id": "task_proj_1750308664554_vnllv97tt_42_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_042_Develop_Admin_UI_for_Transportation_Management.md",
      "content": "# Task 42: Develop Admin UI for Transportation Management\n\n## Overview\n\n**Priority**: Low\n**Status**: Pending\n**Dependencies**: Task 41\n\n## Description\n\nCreate the Flutter UI for administrators to manage transportation details.\n\n## Dependencies Checklist\n- [ ] Ensure Task 41 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'TransportationManagementScreen') with separate sections or tabs for managing routes, stops, drivers, and vehicle schedules. Provide forms for adding new entries and editing existing ones. Integrate with AWS Amplify API to interact with the transportation management backend ('Amplify.API.mutate(request: GraphQLRequest(document: manageTransportationMutation, variables: {data}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the various transportation management forms and display lists. Integration tests to verify successful data submission and accurate display of transportation details. End-to-end test: An admin adds a new route, a new driver, and assigns a driver to a route, verifying all details are correctly saved and displayed.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 42,
        "task_title": "Develop Admin UI for Transportation Management",
        "task_priority": "low",
        "task_status": "pending",
        "dependencies": [
          41
        ],
        "generation_timestamp": "2025-06-19T16:10:36.041252",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.041252",
      "updated_at": "2025-06-19T16:10:36.041252"
    },
    "53": {
      "id": "task_proj_1750308664554_vnllv97tt_43_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_043_Implement_Academic_Activities_(Exams,_Holidays)_Backend.md",
      "content": "# Task 43: Implement Academic Activities (Exams, Holidays) Backend\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nDevelop backend logic for managing exam timetables, holidays, and planning academic activities for the year.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Create a DynamoDB table (e.g., 'AcademicActivities') with fields such as 'type' (e.g., 'exam', 'holiday', 'event'), 'name', 'date', 'description', and an optional 'classId' (for class-specific exams/events). Develop Lambda functions for CRUD operations on this table, exposed via API Gateway. These functions will manage the creation, retrieval, update, and deletion of academic activity entries.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda functions to ensure correct CRUD operations on the 'AcademicActivities' table. Integration tests via API Gateway to confirm that academic activity data is accurately persisted and retrieved.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 43,
        "task_title": "Implement Academic Activities (Exams, Holidays) Backend",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:36.051350",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.051350",
      "updated_at": "2025-06-19T16:10:36.051350"
    },
    "54": {
      "id": "task_proj_1750308664554_vnllv97tt_44_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_044_Develop_Admin_UI_for_Academic_Activities_Management.md",
      "content": "# Task 44: Develop Admin UI for Academic Activities Management\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 43\n\n## Description\n\nCreate the Flutter UI for administrators to manage academic activities.\n\n## Dependencies Checklist\n- [ ] Ensure Task 43 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'AcademicActivitiesManagementScreen') with forms to add and edit various academic activities like holidays, exam schedules, and other events. Include a calendar integration for easy date selection. Integrate with AWS Amplify API to interact with the academic activities backend ('Amplify.API.mutate(request: GraphQLRequest(document: manageAcademicActivityMutation, variables: {data}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the activity forms, date pickers, and display lists. Integration tests to verify successful data submission and accurate display of academic activities. End-to-end test: An admin adds a new holiday and an exam schedule, verifying they appear correctly in the UI.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 44,
        "task_title": "Develop Admin UI for Academic Activities Management",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          43
        ],
        "generation_timestamp": "2025-06-19T16:10:36.062452",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.062452",
      "updated_at": "2025-06-19T16:10:36.062452"
    },
    "55": {
      "id": "task_proj_1750308664554_vnllv97tt_45_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_045_Implement_Teacher_Student_Approval_Backend.md",
      "content": "# Task 45: Implement Teacher Student Approval Backend\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nDevelop backend logic for teachers to approve students into classes, building on existing student assignment.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] When a student is assigned to a class by an admin (Task 18), their enrollment status in that class should initially be 'pending'. Create or extend a DynamoDB table (e.g., 'StudentClassEnrollments') with fields like 'studentId', 'classId', and 'status' (e.g., 'pending', 'approved'). Develop a Lambda function (e.g., 'approveStudentEnrollment') exposed via API Gateway. This function will accept 'enrollmentId' and 'newStatus' as input, validate the 'enrollmentId', and update the 'status' in the 'StudentClassEnrollments' table. Ensure the teacher calling this API has appropriate permissions for the class.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda function to verify permission checks, input validation, and correct status update logic. Integration tests via API Gateway to ensure student enrollment statuses change correctly and only authorized teachers can perform the action.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 45,
        "task_title": "Implement Teacher Student Approval Backend",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:36.073089",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.073089",
      "updated_at": "2025-06-19T16:10:36.073089"
    },
    "56": {
      "id": "task_proj_1750308664554_vnllv97tt_46_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_046_Develop_Teacher_UI_for_Student_Approval.md",
      "content": "# Task 46: Develop Teacher UI for Student Approval\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 45\n\n## Description\n\nCreate the Flutter UI for teachers to view pending student enrollments and approve them.\n\n## Dependencies Checklist\n- [ ] Ensure Task 45 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'TeacherStudentApprovalScreen') that displays a list of students whose enrollment in the teacher's assigned classes is pending. Provide an intuitive way (e.g., a button or toggle) for the teacher to approve each student. Integrate with AWS Amplify API to fetch pending enrollments ('Amplify.API.query(request: GraphQLRequest(document: listPendingEnrollmentsQuery))') and to submit approval actions ('Amplify.API.mutate(request: GraphQLRequest(document: approveStudentEnrollmentMutation, variables: {id: enrollmentId, status: 'approved'}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the student list and approval controls. Integration tests to verify successful API calls and correct UI updates based on backend responses. End-to-end test: A teacher logs in, navigates to the student approval section, approves a student, and verifies the status change is reflected in the UI and backend.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 46,
        "task_title": "Develop Teacher UI for Student Approval",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          45
        ],
        "generation_timestamp": "2025-06-19T16:10:36.087208",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.087208",
      "updated_at": "2025-06-19T16:10:36.087208"
    },
    "57": {
      "id": "task_proj_1750308664554_vnllv97tt_47_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_047_Refine_Attendance_Marking_Backend_(Teacher).md",
      "content": "# Task 47: Refine Attendance Marking Backend (Teacher)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nEnhance backend for teachers to mark student attendance, defaulting all students to present and allowing teachers to uncheck absent students.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Refine the 'AttendanceRecords' DynamoDB table (from Task 21) to include fields like 'studentId', 'classId', 'date', and 'status' (e.g., 'present', 'absent', 'leave'). Develop a Lambda function (e.g., 'submitAttendance') exposed via API Gateway. This function will accept 'classId', 'date', and a list of 'absentStudentIds'. The logic should first identify all students in the given 'classId', default their status to 'present' for the specified 'date', and then update the status to 'absent' for any student ID present in the 'absentStudentIds' list. Store/update these records in 'AttendanceRecords'.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda function to verify the 'default present' logic, correct processing of absent student IDs, and accurate storage in DynamoDB. Integration tests via API Gateway to ensure attendance records are correctly created and updated for a given class and date.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 47,
        "task_title": "Refine Attendance Marking Backend (Teacher)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:36.101790",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.101790",
      "updated_at": "2025-06-19T16:10:36.101790"
    },
    "58": {
      "id": "task_proj_1750308664554_vnllv97tt_48_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_048_Develop_Teacher_UI_for_Weekly_Attendance_Marking.md",
      "content": "# Task 48: Develop Teacher UI for Weekly Attendance Marking\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 47\n\n## Description\n\nCreate the Flutter UI for teachers to mark student attendance using a weekly calendar, with all students marked present by default.\n\n## Dependencies Checklist\n- [ ] Ensure Task 47 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'TeacherAttendanceScreen') featuring a weekly calendar view. When a date is selected, display a list of all students in the teacher's assigned class. Each student should have a checkbox or toggle, defaulting to 'present' (unchecked for absent). Teachers only need to uncheck students who are absent. Integrate with AWS Amplify API to submit attendance data ('Amplify.API.mutate(request: GraphQLRequest(document: submitAttendanceMutation, variables: {classId, date, absentStudentIds}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the calendar widget and the student list with default-present checkboxes. Integration tests to verify successful attendance submission and accurate display of attendance records. End-to-end test: A teacher selects a date, marks a few students absent, submits, and then verifies the attendance records are correctly saved and reflected.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 48,
        "task_title": "Develop Teacher UI for Weekly Attendance Marking",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          47
        ],
        "generation_timestamp": "2025-06-19T16:10:36.117732",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.117732",
      "updated_at": "2025-06-19T16:10:36.117732"
    },
    "59": {
      "id": "task_proj_1750308664554_vnllv97tt_49_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_049_Implement_Daily_Diary_Entry_Backend_(Teacher).md",
      "content": "# Task 49: Implement Daily Diary Entry Backend (Teacher)\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nDevelop backend logic for teachers to create tasks and homework entries in the daily diary for the academic year.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Create a DynamoDB table (e.g., 'DailyDiaryEntries') with fields such as 'classId', 'date', 'teacherId', 'type' (e.g., 'task', 'homework', 'note'), 'content', and an optional 'dueDate' (for tasks/homework). Develop Lambda functions for CRUD operations on this table, exposed via API Gateway. These functions will handle the creation, retrieval, update, and deletion of daily diary entries.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda functions to ensure correct CRUD operations on the 'DailyDiaryEntries' table, including proper handling of different entry types and due dates. Integration tests via API Gateway to confirm that daily diary entries are accurately persisted and retrieved.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 49,
        "task_title": "Implement Daily Diary Entry Backend (Teacher)",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:36.132476",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.132476",
      "updated_at": "2025-06-19T16:10:36.132476"
    },
    "60": {
      "id": "task_proj_1750308664554_vnllv97tt_50_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_050_Develop_Teacher_UI_for_Daily_Diary_Entries.md",
      "content": "# Task 50: Develop Teacher UI for Daily Diary Entries\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 49\n\n## Description\n\nCreate the Flutter UI for teachers to create and manage daily diary entries.\n\n## Dependencies Checklist\n- [ ] Ensure Task 49 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'TeacherDailyDiaryScreen') that allows teachers to select a date and then create new daily diary entries for their assigned classes. Provide input fields for content, type (task, homework, note), and a due date picker for tasks/homework. Integrate with AWS Amplify API to submit and retrieve daily diary data ('Amplify.API.mutate(request: GraphQLRequest(document: manageDailyDiaryEntryMutation, variables: {data}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the date picker and diary entry forms. Integration tests to verify successful data submission and accurate display of daily diary entries. End-to-end test: A teacher creates a new homework entry for a specific date, saves it, and verifies it appears correctly in the diary.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 50,
        "task_title": "Develop Teacher UI for Daily Diary Entries",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          49
        ],
        "generation_timestamp": "2025-06-19T16:10:36.149631",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.149631",
      "updated_at": "2025-06-19T16:10:36.149631"
    },
    "61": {
      "id": "task_proj_1750308664554_vnllv97tt_51_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_051_Implement_Assessment_&_Grading_Backend_(Teacher).md",
      "content": "# Task 51: Implement Assessment & Grading Backend (Teacher)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nDevelop backend logic for teachers to mark and grade tasks/exams for each student during the academic year.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Create or extend DynamoDB tables: 'Assessments' (e.g., 'assessmentId', 'classId', 'subjectId', 'type' (task/exam), 'name', 'maxMarks') and 'Grades' (e.g., 'gradeId', 'assessmentId', 'studentId', 'marksObtained', 'comments'). Develop Lambda functions (e.g., 'submitGrades') exposed via API Gateway. This function will accept 'assessmentId' and a list of 'studentGrades' (each containing 'studentId', 'marksObtained', 'comments'). The function will store/update these grades in the 'Grades' table, ensuring proper linkage to the assessment and student.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda functions to ensure correct CRUD operations on 'Assessments' and 'Grades' tables, including validation of marks. Integration tests via API Gateway to confirm that grades are accurately persisted and linked to the correct assessment and student.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 51,
        "task_title": "Implement Assessment & Grading Backend (Teacher)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:36.167016",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.167016",
      "updated_at": "2025-06-19T16:10:36.167016"
    },
    "62": {
      "id": "task_proj_1750308664554_vnllv97tt_52_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_052_Develop_Teacher_UI_for_Assessment_&_Grading.md",
      "content": "# Task 52: Develop Teacher UI for Assessment & Grading\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 51\n\n## Description\n\nCreate the Flutter UI for teachers to input marks and grades for students for various assessments.\n\n## Dependencies Checklist\n- [ ] Ensure Task 51 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'TeacherGradingScreen') where teachers can select an assessment and then view a list of students in the relevant class. For each student, provide input fields for 'marksObtained' and 'comments'. Integrate with AWS Amplify API to submit the grades ('Amplify.API.mutate(request: GraphQLRequest(document: submitGradesMutation, variables: {assessmentId, studentGrades}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the assessment selection and student grading input fields. Integration tests to verify successful data submission and accurate display of grades. End-to-end test: A teacher selects an assessment, enters marks and comments for students, submits, and verifies the grades are correctly saved and displayed.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 52,
        "task_title": "Develop Teacher UI for Assessment & Grading",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          51
        ],
        "generation_timestamp": "2025-06-19T16:10:36.183598",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.183598",
      "updated_at": "2025-06-19T16:10:36.183598"
    },
    "63": {
      "id": "task_proj_1750308664554_vnllv97tt_53_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_053_Implement_Results_Publication_Backend_(Teacher).md",
      "content": "# Task 53: Implement Results Publication Backend (Teacher)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 51\n\n## Description\n\nDevelop backend logic for teachers to publish quarterly and half-yearly exam results, making them visible to parents.\n\n## Dependencies Checklist\n- [ ] Ensure Task 51 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend the 'Assessments' table (or create a 'ResultPublications' table) to include a 'publicationStatus' field (e.g., 'draft', 'published') and 'publicationDate'. Develop a Lambda function (e.g., 'publishResults') exposed via API Gateway. This function will accept an 'assessmentId' and update its 'publicationStatus' to 'published'. It should also trigger a notification (via Task 55) to relevant parents/students that results have been published.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda function to verify correct status updates and the triggering of notifications. Integration tests via API Gateway to ensure that results status changes correctly and that associated notifications are initiated.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 53,
        "task_title": "Implement Results Publication Backend (Teacher)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          51
        ],
        "generation_timestamp": "2025-06-19T16:10:36.200385",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.200385",
      "updated_at": "2025-06-19T16:10:36.200385"
    },
    "64": {
      "id": "task_proj_1750308664554_vnllv97tt_54_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_054_Develop_Teacher_UI_for_Results_Publication.md",
      "content": "# Task 54: Develop Teacher UI for Results Publication\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 53\n\n## Description\n\nCreate the Flutter UI for teachers to publish exam results after grading is complete.\n\n## Dependencies Checklist\n- [ ] Ensure Task 53 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'TeacherResultsPublicationScreen') that lists completed assessments. For each assessment, provide a 'Publish' button. Upon clicking, display a confirmation dialog before sending the API call. Integrate with AWS Amplify API to publish results ('Amplify.API.mutate(request: GraphQLRequest(document: publishResultsMutation, variables: {assessmentId}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the results list and publish button. Integration tests to verify successful API calls and appropriate UI feedback (e.g., success message, status update). End-to-end test: A teacher publishes an assessment's results, confirms the action, and verifies the status changes in the UI.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 54,
        "task_title": "Develop Teacher UI for Results Publication",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          53
        ],
        "generation_timestamp": "2025-06-19T16:10:36.217260",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.217260",
      "updated_at": "2025-06-19T16:10:36.217260"
    },
    "65": {
      "id": "task_proj_1750308664554_vnllv97tt_55_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_055_Refine_Teacher_Communication_Backend_(Targeted_Notifications).md",
      "content": "# Task 55: Refine Teacher Communication Backend (Targeted Notifications)\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nEnhance backend for teachers to send notifications to all students in a class or to individual students.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Extend the 'Notifications' DynamoDB table (from Task 24) to include fields like 'targetType' (e.g., 'class', 'student') and 'targetId' (e.g., 'classId', 'studentId'). Develop a Lambda function (e.g., 'sendTargetedNotification') exposed via API Gateway. This function will accept 'senderId', 'message', 'targetType', and 'targetId'. If 'targetType' is 'class', the function should fetch all students in that class and create individual notification entries or mark the notification for retrieval by all students in that class. If 'targetType' is 'student', it should create a notification for the specific student.\n\n## Testing Checklist\n\n- [ ] Unit tests for the Lambda function to verify correct handling of different target types and accurate storage of notification data. Integration tests via API Gateway to ensure targeted notifications are correctly processed and associated with the intended recipients.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 55,
        "task_title": "Refine Teacher Communication Backend (Targeted Notifications)",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:36.234110",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.234110",
      "updated_at": "2025-06-19T16:10:36.234110"
    },
    "66": {
      "id": "task_proj_1750308664554_vnllv97tt_56_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_056_Develop_Teacher_UI_for_Targeted_Notifications.md",
      "content": "# Task 56: Develop Teacher UI for Targeted Notifications\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 55\n\n## Description\n\nCreate the Flutter UI for teachers to send targeted notifications to students.\n\n## Dependencies Checklist\n- [ ] Ensure Task 55 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design a Flutter UI screen (e.g., 'TeacherNotificationScreen') that allows teachers to compose messages and select their target audience. Provide options to select 'All students in class' or 'Individual student'. If 'Individual student' is selected, provide a dropdown or search bar to select a specific student. Integrate with AWS Amplify API to send the targeted notifications ('Amplify.API.mutate(request: GraphQLRequest(document: sendTargetedNotificationMutation, variables: {data}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the target selection dropdown/search and message input field. Integration tests to verify successful notification submission and appropriate UI feedback. End-to-end test: A teacher sends a notification to a specific student, and then verifies that the student (or parent) receives it.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 56,
        "task_title": "Develop Teacher UI for Targeted Notifications",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          55
        ],
        "generation_timestamp": "2025-06-19T16:10:36.249378",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.249378",
      "updated_at": "2025-06-19T16:10:36.249378"
    },
    "67": {
      "id": "task_proj_1750308664554_vnllv97tt_57_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_057_Refine_Parent_Attendance_Tracking_UI.md",
      "content": "# Task 57: Refine Parent Attendance Tracking UI\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nEnhance the Flutter UI for parents to view daily student attendance and overall attendance percentage for the academic year.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Refine the existing Parent Dashboard (Task 20) to include a dedicated section for attendance tracking. Design a Flutter UI that displays a calendar view where parents can select dates to see their child's daily attendance status (present/absent/leave). Additionally, display an overall attendance percentage for the academic year. Integrate with AWS Amplify API to fetch attendance data ('Amplify.API.query(request: GraphQLRequest(document: getStudentAttendanceQuery, variables: {studentId}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the calendar widget and attendance display. Integration tests to verify successful data retrieval from the backend and accurate display of daily and overall attendance. End-to-end test: A parent logs in, navigates to attendance, selects various dates, and verifies the attendance records and percentage are correct.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 57,
        "task_title": "Refine Parent Attendance Tracking UI",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:36.265791",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.265791",
      "updated_at": "2025-06-19T16:10:36.265791"
    },
    "68": {
      "id": "task_proj_1750308664554_vnllv97tt_58_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_058_Refine_Parent_Daily_Diary_Access_UI.md",
      "content": "# Task 58: Refine Parent Daily Diary Access UI\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nEnhance the Flutter UI for parents to view daily diary entries using a weekly calendar, including teacher notes and observations.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Refine the existing Parent Dashboard (Task 20) to include a dedicated section for daily diary access. Design a Flutter UI that features a weekly calendar. When a date is selected, display all daily diary entries for their child, including teacher notes, tasks, and homework entries. Integrate with AWS Amplify API to fetch daily diary data ('Amplify.API.query(request: GraphQLRequest(document: getStudentDailyDiaryQuery, variables: {studentId, date}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the weekly calendar and diary entry display. Integration tests to verify successful data retrieval and accurate display of daily diary entries. End-to-end test: A parent logs in, navigates to the daily diary, selects various dates, and verifies the entries are correct and complete.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 58,
        "task_title": "Refine Parent Daily Diary Access UI",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:10:36.281267",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.281267",
      "updated_at": "2025-06-19T16:10:36.281267"
    },
    "69": {
      "id": "task_proj_1750308664554_vnllv97tt_59_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_059_Refine_Parent_Results_Monitoring_UI.md",
      "content": "# Task 59: Refine Parent Results Monitoring UI\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 53\n\n## Description\n\nEnhance the Flutter UI for parents to check results published by teachers for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 53 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Refine the existing Parent Dashboard (Task 20) to include a dedicated section for results monitoring. Design a Flutter UI that displays a list of all published results for their child, including details such as subject, assessment name, marks obtained, and any teacher comments. Integrate with AWS Amplify API to fetch published results data ('Amplify.API.query(request: GraphQLRequest(document: getStudentResultsQuery, variables: {studentId}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the results list display and individual result details. Integration tests to verify successful data retrieval and accurate display of published results. End-to-end test: A parent logs in, navigates to the results section, and verifies that all published results for their child are correctly displayed.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 59,
        "task_title": "Refine Parent Results Monitoring UI",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          53
        ],
        "generation_timestamp": "2025-06-19T16:10:36.295884",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.295884",
      "updated_at": "2025-06-19T16:10:36.295884"
    },
    "70": {
      "id": "task_proj_1750308664554_vnllv97tt_60_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_060_Refine_Parent_Fee_Information_&_Due_Dates_UI.md",
      "content": "# Task 60: Refine Parent Fee Information & Due Dates UI\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 39\n\n## Description\n\nEnhance the Flutter UI for parents to view fee structure and due dates for their child's class.\n\n## Dependencies Checklist\n- [ ] Ensure Task 39 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Refine the existing Parent Dashboard (Task 20) to include a dedicated section for fee information. Design a Flutter UI that displays the fee structure and breakdown for their child's class, along with upcoming due dates. This should clearly show the total fee, individual components, and payment deadlines. Integrate with AWS Amplify API to fetch fee information ('Amplify.API.query(request: GraphQLRequest(document: getStudentFeeInfoQuery, variables: {studentId}))').\n\n## Testing Checklist\n\n- [ ] UI component tests for the fee structure display and due date list. Integration tests to verify successful data retrieval and accurate display of fee information. End-to-end test: A parent logs in, navigates to the fee section, and verifies that the fee structure and due dates for their child's class are correctly displayed.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:10:36*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 60,
        "task_title": "Refine Parent Fee Information & Due Dates UI",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          39
        ],
        "generation_timestamp": "2025-06-19T16:10:36.310572",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.310572",
      "updated_at": "2025-06-19T16:10:36.310572"
    },
    "71": {
      "id": "tasks_index_proj_1750308664554_vnllv97tt_1750329636",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "tasks_index",
      "file_name": "Tasks_Index.md",
      "content": "# Tasks Index\n\nGenerated on 2025-06-19 16:10:36\n\nTotal Tasks: 30\n\n## Task Progress Checklist\n\n### High Priority Tasks\n- [ ] **Task 31**: Implement Admin Profile Approval/Deactivation Backend\n- [ ] **Task 32**: Develop Admin UI for Profile Approval/Deactivation\n- [ ] **Task 37**: Implement Timetable Generation Logic (Admin)\n- [ ] **Task 38**: Develop Admin UI for Timetable Management\n- [ ] **Task 45**: Implement Teacher Student Approval Backend\n- [ ] **Task 46**: Develop Teacher UI for Student Approval\n- [ ] **Task 47**: Refine Attendance Marking Backend (Teacher)\n- [ ] **Task 48**: Develop Teacher UI for Weekly Attendance Marking\n- [ ] **Task 51**: Implement Assessment & Grading Backend (Teacher)\n- [ ] **Task 52**: Develop Teacher UI for Assessment & Grading\n- [ ] **Task 53**: Implement Results Publication Backend (Teacher)\n- [ ] **Task 54**: Develop Teacher UI for Results Publication\n\n### Medium Priority Tasks\n- [ ] **Task 33**: Implement Class Teacher Assignment Backend\n- [ ] **Task 34**: Develop Admin UI for Class Teacher Assignment\n- [ ] **Task 35**: Refine Academic Year Structure Management Backend\n- [ ] **Task 36**: Develop Admin UI for Academic Year Structure Management\n- [ ] **Task 39**: Implement Fee Structure Backend\n- [ ] **Task 40**: Develop Admin UI for Fee Structure Management\n- [ ] **Task 43**: Implement Academic Activities (Exams, Holidays) Backend\n- [ ] **Task 44**: Develop Admin UI for Academic Activities Management\n- [ ] **Task 49**: Implement Daily Diary Entry Backend (Teacher)\n- [ ] **Task 50**: Develop Teacher UI for Daily Diary Entries\n- [ ] **Task 55**: Refine Teacher Communication Backend (Targeted Notifications)\n- [ ] **Task 56**: Develop Teacher UI for Targeted Notifications\n- [ ] **Task 57**: Refine Parent Attendance Tracking UI\n- [ ] **Task 58**: Refine Parent Daily Diary Access UI\n- [ ] **Task 59**: Refine Parent Results Monitoring UI\n- [ ] **Task 60**: Refine Parent Fee Information & Due Dates UI\n\n### Low Priority Tasks\n- [ ] **Task 41**: Implement Transportation Management Backend\n- [ ] **Task 42**: Develop Admin UI for Transportation Management\n\n## Project Completion Checklist\n\n- [ ] All high priority tasks completed\n- [ ] All medium priority tasks completed\n- [ ] All low priority tasks completed\n- [ ] Integration testing completed\n- [ ] Documentation finalized\n- [ ] Code review completed\n- [ ] Performance testing completed\n- [ ] Security review completed\n- [ ] Deployment preparation completed\n- [ ] Project ready for release\n\n## Task Details Table\n\n| ID | Title | Priority | Status | Dependencies |\n|----|-------|----------|--------|--------------|\n| 31 | Implement Admin Profile Approval/Deactivation Backend | high | pending | None |\n| 32 | Develop Admin UI for Profile Approval/Deactivation | high | pending | #31 |\n| 33 | Implement Class Teacher Assignment Backend | medium | pending | None |\n| 34 | Develop Admin UI for Class Teacher Assignment | medium | pending | #33 |\n| 35 | Refine Academic Year Structure Management Backend | medium | pending | None |\n| 36 | Develop Admin UI for Academic Year Structure Management | medium | pending | #35 |\n| 37 | Implement Timetable Generation Logic (Admin) | high | pending | None |\n| 38 | Develop Admin UI for Timetable Management | high | pending | #37 |\n| 39 | Implement Fee Structure Backend | medium | pending | None |\n| 40 | Develop Admin UI for Fee Structure Management | medium | pending | #39 |\n| 41 | Implement Transportation Management Backend | low | pending | None |\n| 42 | Develop Admin UI for Transportation Management | low | pending | #41 |\n| 43 | Implement Academic Activities (Exams, Holidays) Backend | medium | pending | None |\n| 44 | Develop Admin UI for Academic Activities Management | medium | pending | #43 |\n| 45 | Implement Teacher Student Approval Backend | high | pending | None |\n| 46 | Develop Teacher UI for Student Approval | high | pending | #45 |\n| 47 | Refine Attendance Marking Backend (Teacher) | high | pending | None |\n| 48 | Develop Teacher UI for Weekly Attendance Marking | high | pending | #47 |\n| 49 | Implement Daily Diary Entry Backend (Teacher) | medium | pending | None |\n| 50 | Develop Teacher UI for Daily Diary Entries | medium | pending | #49 |\n| 51 | Implement Assessment & Grading Backend (Teacher) | high | pending | None |\n| 52 | Develop Teacher UI for Assessment & Grading | high | pending | #51 |\n| 53 | Implement Results Publication Backend (Teacher) | high | pending | #51 |\n| 54 | Develop Teacher UI for Results Publication | high | pending | #53 |\n| 55 | Refine Teacher Communication Backend (Targeted Notifications) | medium | pending | None |\n| 56 | Develop Teacher UI for Targeted Notifications | medium | pending | #55 |\n| 57 | Refine Parent Attendance Tracking UI | medium | pending | None |\n| 58 | Refine Parent Daily Diary Access UI | medium | pending | None |\n| 59 | Refine Parent Results Monitoring UI | medium | pending | #53 |\n| 60 | Refine Parent Fee Information & Due Dates UI | medium | pending | #39 |\n\n## Task Dependencies\n\nThe following shows the task dependencies:\n\n```\nTask 32 depends on: Task 31\nTask 34 depends on: Task 33\nTask 36 depends on: Task 35\nTask 38 depends on: Task 37\nTask 40 depends on: Task 39\nTask 42 depends on: Task 41\nTask 44 depends on: Task 43\nTask 46 depends on: Task 45\nTask 48 depends on: Task 47\nTask 50 depends on: Task 49\nTask 52 depends on: Task 51\nTask 53 depends on: Task 51\nTask 54 depends on: Task 53\nTask 56 depends on: Task 55\nTask 59 depends on: Task 53\nTask 60 depends on: Task 39\n```\n",
      "metadata": {
        "generated_from": "task_master",
        "tasks_count": 30,
        "generation_timestamp": "2025-06-19T16:10:36.327157",
        "is_primary": true
      },
      "status": "generated",
      "created_at": "2025-06-19T16:10:36.327157",
      "updated_at": "2025-06-19T16:10:36.327157"
    },
    "72": {
      "id": "overview_proj_1750308664554_vnllv97tt_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "project_overview",
      "file_name": "ProjectOverview.md",
      "content": "# Project Overview\n\nGenerated from Task Master on 2025-06-19 16:14:49\n\n## Summary\n\nThis project consists of 30 main tasks generated from the Product Requirements Document (PRD).\n\n## Project Setup Checklist\n\n- [ ] Review all project requirements and constraints\n- [ ] Set up development environment\n- [ ] Initialize project repository\n- [ ] Configure development tools and dependencies\n- [ ] Set up testing framework\n- [ ] Configure CI/CD pipeline (if applicable)\n- [ ] Set up documentation structure\n\n## Task Breakdown Checklist\n\n### High Priority Tasks\n- [ ] **Task 1**: Project Initialization & AWS Amplify Setup\n- [ ] **Task 2**: Configure AWS Cognito for Authentication\n- [ ] **Task 3**: Design & Implement Core DynamoDB Data Models\n- [ ] **Task 4**: Configure Amplify GraphQL API for Core Models\n- [ ] **Task 6**: Implement User Registration Flow\n- [ ] **Task 7**: Implement User Login Flow\n- [ ] **Task 8**: Develop Multi-Profile Selection & Creation Logic\n- [ ] **Task 9**: Implement Profile Persistence & Auto-Redirection\n- [ ] **Task 10**: Implement Campus Management (CRUD)\n- [ ] **Task 12**: Implement Class & Subject Management\n- [ ] **Task 13**: Implement Admin Profile Approval/Deactivation\n- [ ] **Task 17**: Implement Timetable Management\n- [ ] **Task 21**: Implement Teacher Dashboard & Assigned Class/Subject Access\n- [ ] **Task 22**: Implement Student Approval into Classes (Teacher)\n- [ ] **Task 23**: Implement Weekly Student Attendance Marking\n- [ ] **Task 25**: Implement Assessment & Grading for Students\n- [ ] **Task 26**: Implement Results Publication\n- [ ] **Task 28**: Implement Parent Dashboard & Child-Specific Data Access\n- [ ] **Task 29**: Implement Student Attendance & Daily Diary Viewing (Parent)\n- [ ] **Task 30**: Implement Results, Fee Information, Timetable, & Homework Viewing (Parent)\n\n### Medium Priority Tasks\n- [ ] **Task 5**: Implement Base Flutter UI Structure & Navigation\n- [ ] **Task 11**: Implement Academic Year Structure Definition\n- [ ] **Task 14**: Implement Teacher Assignment to Classes & Subjects\n- [ ] **Task 15**: Implement Class Teacher Assignment\n- [ ] **Task 16**: Implement Student Assignment to Classes\n- [ ] **Task 18**: Implement Fee Structure & Due Dates Management\n- [ ] **Task 20**: Implement Academic Activities Management\n- [ ] **Task 24**: Implement Daily Activities & Homework Entry\n- [ ] **Task 27**: Implement Teacher-to-Student/Class Communication\n\n### Low Priority Tasks\n- [ ] **Task 19**: Implement Transportation Management\n\n## Project Milestones Checklist\n\n- [ ] Phase 1: High priority tasks completed\n- [ ] Phase 2: Medium priority tasks completed\n- [ ] Phase 3: Low priority tasks completed\n- [ ] Integration testing completed\n- [ ] Performance testing completed\n- [ ] Security review completed\n- [ ] Documentation finalized\n- [ ] Code review completed\n- [ ] Deployment preparation completed\n- [ ] Project ready for release\n\n## Quality Assurance Checklist\n\n- [ ] All code follows project standards\n- [ ] All tests are passing\n- [ ] Code coverage meets requirements\n- [ ] No security vulnerabilities\n- [ ] Performance requirements met\n- [ ] Documentation is complete and accurate\n- [ ] All dependencies are up to date\n- [ ] Error handling is comprehensive\n\n## Implementation Notes\n\nEach task has been designed to be atomic and focused on a single responsibility. Tasks are ordered logically considering dependencies and implementation sequence.\n\nFor detailed information about each task, refer to the individual task files.\n",
      "metadata": {
        "generated_from": "task_master",
        "tasks_count": 30,
        "generation_timestamp": "2025-06-19T16:14:49.634282",
        "is_primary": true
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.634282",
      "updated_at": "2025-06-19T16:14:49.634282"
    },
    "73": {
      "id": "task_proj_1750308664554_vnllv97tt_1_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_001_Project_Initialization_&_AWS_Amplify_Setup.md",
      "content": "# Task 1: Project Initialization & AWS Amplify Setup\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nInitialize the Flutter project and set up AWS Amplify for backend integration, including necessary dependencies.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Create a new Flutter project using `flutter create campus_pilot`. Add `amplify_flutter: ^1.0.0`, `amplify_auth_cognito: ^1.0.0`, and `amplify_api_graphql: ^1.0.0` to `pubspec.yaml`. Run `flutter pub get`. Initialize Amplify in the Flutter project by running `amplify init` in the project root and following the prompts to select AWS region and project name. Ensure `amplifyconfiguration.dart` is generated correctly.\n\n## Testing Checklist\n\n- [ ] Verify `flutter pub get` completes without errors. Run `amplify init` successfully. Confirm `amplifyconfiguration.dart` is created and contains basic configuration. Build and run the Flutter app to ensure no initial build issues.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 1,
        "task_title": "Project Initialization & AWS Amplify Setup",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:14:49.663674",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.663674",
      "updated_at": "2025-06-19T16:14:49.663674"
    },
    "74": {
      "id": "task_proj_1750308664554_vnllv97tt_2_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_002_Configure_AWS_Cognito_for_Authentication.md",
      "content": "# Task 2: Configure AWS Cognito for Authentication\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 1\n\n## Description\n\nConfigure AWS Cognito User Pool for user authentication and Identity Pool for authorization within the Amplify project.\n\n## Dependencies Checklist\n- [ ] Ensure Task 1 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Run `amplify add auth` in the project directory. Choose 'Default configuration with Social Provider (Federation)' to allow future expansion, but initially select 'Email' for sign-in. Configure password policies (e.g., minimum length, required characters). After configuration, run `amplify push` to deploy the Cognito resources to AWS. This will create a User Pool and an Identity Pool.\n\n## Testing Checklist\n\n- [ ] Verify that a Cognito User Pool and Identity Pool are created in the AWS console. Check the User Pool settings for email sign-in and password policies. Attempt to manually create a user in the Cognito User Pool via the AWS console to confirm it's active.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 2,
        "task_title": "Configure AWS Cognito for Authentication",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          1
        ],
        "generation_timestamp": "2025-06-19T16:14:49.690121",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.690121",
      "updated_at": "2025-06-19T16:14:49.690121"
    },
    "75": {
      "id": "task_proj_1750308664554_vnllv97tt_3_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_003_Design_&_Implement_Core_DynamoDB_Data_Models.md",
      "content": "# Task 3: Design & Implement Core DynamoDB Data Models\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 2\n\n## Description\n\nDesign and implement the core DynamoDB data models for Users, Profiles, and Campuses using GraphQL schema definitions.\n\n## Dependencies Checklist\n- [ ] Ensure Task 2 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Define the GraphQL schema in `amplify/backend/api/<api-name>/schema.graphql`. Use `@model` directive for each type. Example schema: `type User @model { id: ID!, email: String!, name: String!, profiles: [Profile] @hasMany }`, `type Profile @model { id: ID!, userId: ID!, profileType: ProfileType!, campusId: ID!, details: AWSJSON, user: User @belongsTo }`, `type Campus @model { id: ID!, name: String!, address: String!, settings: AWSJSON }`, `enum ProfileType { ADMIN, TEACHER, PARENT }`. Run `amplify push` to deploy these models, which will create corresponding DynamoDB tables.\n\n## Testing Checklist\n\n- [ ] Verify that DynamoDB tables for 'User', 'Profile', and 'Campus' are created in the AWS console. Use the AWS AppSync console to perform basic GraphQL mutations (e.g., `createCampus`, `createUser`, `createProfile`) and queries (`listCampuses`, `listUsers`, `listProfiles`) to ensure the schema is correctly deployed and data can be manipulated.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 3,
        "task_title": "Design & Implement Core DynamoDB Data Models",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          2
        ],
        "generation_timestamp": "2025-06-19T16:14:49.711184",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.711184",
      "updated_at": "2025-06-19T16:14:49.711184"
    },
    "76": {
      "id": "task_proj_1750308664554_vnllv97tt_4_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_004_Configure_Amplify_GraphQL_API_for_Core_Models.md",
      "content": "# Task 4: Configure Amplify GraphQL API for Core Models\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 3\n\n## Description\n\nConfigure the AWS Amplify GraphQL API to expose the defined core data models for CRUD operations.\n\n## Dependencies Checklist\n- [ ] Ensure Task 3 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] This task is largely handled by `amplify add api` and `amplify push` after defining the GraphQL schema. Ensure `@auth` rules are correctly applied to the models in `schema.graphql` to control access (e.g., `@auth(rules: [{ allow: public }])` for initial testing, then refine with `owner` or `groups` based on user roles). The Amplify CLI will provision AWS AppSync and API Gateway resources.\n\n## Testing Checklist\n\n- [ ] Use `amplify mock api` to test GraphQL queries and mutations locally against the defined schema. Verify that an AWS AppSync API endpoint is created and accessible in the AWS console. Confirm that basic CRUD operations via GraphQL are functional using a tool like Insomnia or Postman.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 4,
        "task_title": "Configure Amplify GraphQL API for Core Models",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          3
        ],
        "generation_timestamp": "2025-06-19T16:14:49.736188",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.736188",
      "updated_at": "2025-06-19T16:14:49.736188"
    },
    "77": {
      "id": "task_proj_1750308664554_vnllv97tt_5_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_005_Implement_Base_Flutter_UI_Structure_&_Navigation.md",
      "content": "# Task 5: Implement Base Flutter UI Structure & Navigation\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 1\n\n## Description\n\nImplement the foundational Flutter UI structure, including routing and placeholder screens for key application flows.\n\n## Dependencies Checklist\n- [ ] Ensure Task 1 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Set up the `MaterialApp` widget as the root of the application. Implement a robust navigation system, potentially using `Navigator 2.0` or a package like `GoRouter` or `Riverpod Router` for declarative routing. Create placeholder screens for `LoginScreen`, `RegistrationScreen`, `ProfileSelectionScreen`, and a generic `DashboardScreen`. Use a simple state management solution (e.g., `Provider` or `Bloc`) for basic app-wide state.\n\n## Testing Checklist\n\n- [ ] Run the Flutter application. Verify that the initial screen loads correctly. Test navigation between the placeholder screens (e.g., from login to registration, or to a dummy dashboard) to ensure routing is functional.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 5,
        "task_title": "Implement Base Flutter UI Structure & Navigation",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          1
        ],
        "generation_timestamp": "2025-06-19T16:14:49.754229",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.754229",
      "updated_at": "2025-06-19T16:14:49.754229"
    },
    "78": {
      "id": "task_proj_1750308664554_vnllv97tt_6_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_006_Implement_User_Registration_Flow.md",
      "content": "# Task 6: Implement User Registration Flow\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 2, Task 5\n\n## Description\n\nDevelop the user registration UI and integrate it with AWS Amplify Authentication for new user sign-ups.\n\n## Dependencies Checklist\n- [ ] Ensure Task 2 is completed\n- [ ] Ensure Task 5 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create a Flutter UI for user registration, including input fields for email, password, and name. Implement form validation. Integrate with `Amplify.Auth.signUp` to register new users and `Amplify.Auth.confirmSignUp` for email verification. Handle `AuthException` for error display. Example: `try { SignUpResult res = await Amplify.Auth.signUp(username: email, password: password, options: SignUpOptions(userAttributes: { AuthUserAttributeKey.email: email, AuthUserAttributeKey.name: name })); } on AuthException catch (e) { /* show error */ }`\n\n## Testing Checklist\n\n- [ ] Attempt to register a new user with valid credentials. Verify that the user appears in the Cognito User Pool with 'UNCONFIRMED' status. Test the confirmation flow (e.g., by manually confirming or using a mock email service). Verify the user status changes to 'CONFIRMED'. Test with invalid inputs (e.g., weak password, existing email) and verify error messages.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 6,
        "task_title": "Implement User Registration Flow",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          2,
          5
        ],
        "generation_timestamp": "2025-06-19T16:14:49.774877",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.774877",
      "updated_at": "2025-06-19T16:14:49.774877"
    },
    "79": {
      "id": "task_proj_1750308664554_vnllv97tt_7_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_007_Implement_User_Login_Flow.md",
      "content": "# Task 7: Implement User Login Flow\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 2, Task 5\n\n## Description\n\nDevelop the user login UI and integrate it with AWS Amplify Authentication for existing user sign-ins.\n\n## Dependencies Checklist\n- [ ] Ensure Task 2 is completed\n- [ ] Ensure Task 5 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create a Flutter UI for user login, including input fields for email and password. Implement form validation. Integrate with `Amplify.Auth.signIn` to authenticate users. Handle `AuthException` for error display. Upon successful login, store the user session and prepare for profile selection. Example: `try { SignInResult res = await Amplify.Auth.signIn(username: email, password: password); } on AuthException catch (e) { /* show error */ }`\n\n## Testing Checklist\n\n- [ ] Attempt to log in with a registered and confirmed user. Verify successful login and redirection. Test with incorrect email/password combinations and verify appropriate error messages are displayed. Test edge cases like unconfirmed users.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 7,
        "task_title": "Implement User Login Flow",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          2,
          5
        ],
        "generation_timestamp": "2025-06-19T16:14:49.795322",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.795322",
      "updated_at": "2025-06-19T16:14:49.795322"
    },
    "80": {
      "id": "task_proj_1750308664554_vnllv97tt_8_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_008_Develop_Multi-Profile_Selection_&_Creation_Logic.md",
      "content": "# Task 8: Develop Multi-Profile Selection & Creation Logic\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 3, Task 4, Task 7\n\n## Description\n\nImplement the UI and backend logic for users to select an existing profile or create new profiles (Admin, Teacher, Parent) after login.\n\n## Dependencies Checklist\n- [ ] Ensure Task 3 is completed\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 7 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] After successful login, query the `Profile` DynamoDB table via Amplify GraphQL to fetch all profiles associated with the logged-in `userId` (obtained from Cognito session). If multiple profiles exist, display a selection screen. If no profiles, present a UI to create new profiles (Admin, Teacher, Parent), requiring campus selection and specific details for each profile type. Use GraphQL mutations (`createProfile`) to persist new profiles.\n\n## Testing Checklist\n\n- [ ] Log in as a new user; verify the profile creation screen appears. Create an 'Admin' profile for a new campus. Log in as another user; create a 'Teacher' profile for an existing campus. Log in as a user with multiple profiles; verify the profile selection screen appears and allows selection. Confirm profile data is correctly stored in DynamoDB.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 8,
        "task_title": "Develop Multi-Profile Selection & Creation Logic",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          3,
          4,
          7
        ],
        "generation_timestamp": "2025-06-19T16:14:49.813130",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.813130",
      "updated_at": "2025-06-19T16:14:49.813130"
    },
    "81": {
      "id": "task_proj_1750308664554_vnllv97tt_9_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_009_Implement_Profile_Persistence_&_Auto-Redirection.md",
      "content": "# Task 9: Implement Profile Persistence & Auto-Redirection\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 8\n\n## Description\n\nImplement logic to persist the selected user profile locally and automatically redirect the user to their respective dashboard upon app reopening.\n\n## Dependencies Checklist\n- [ ] Ensure Task 8 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Use `shared_preferences` (or `flutter_secure_storage` for enhanced security) to store the `profileId` of the selected profile. On application startup, check for a stored `profileId`. If found, fetch the corresponding profile details from DynamoDB and redirect the user to the appropriate dashboard (Admin, Teacher, or Parent) based on `profileType`. If no `profileId` is stored, redirect to the login/profile selection flow.\n\n## Testing Checklist\n\n- [ ] Select a profile (e.g., Admin), close the app completely, and reopen it. Verify that the app automatically redirects to the Admin dashboard without requiring re-login or re-selection. Clear app data (e.g., uninstall/reinstall) and verify that the app correctly navigates to the login/profile selection screen.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 9,
        "task_title": "Implement Profile Persistence & Auto-Redirection",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          8
        ],
        "generation_timestamp": "2025-06-19T16:14:49.834693",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.834693",
      "updated_at": "2025-06-19T16:14:49.834693"
    },
    "82": {
      "id": "task_proj_1750308664554_vnllv97tt_10_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_010_Implement_Campus_Management_(CRUD).md",
      "content": "# Task 10: Implement Campus Management (CRUD)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 4, Task 9\n\n## Description\n\nDevelop the Admin UI and backend logic for creating, viewing, updating, and deleting campus settings.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 9 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create a dedicated Admin dashboard section for Campus Management. Implement forms for creating new campuses and displaying a list of existing ones. Use Amplify GraphQL mutations (`createCampus`, `updateCampus`, `deleteCampus`) and queries (`listCampuses`) to interact with the `Campus` DynamoDB table. Implement client-side input validation for campus details.\n\n## Testing Checklist\n\n- [ ] As an Admin, create a new campus entry. Verify it appears in the list and in DynamoDB. Edit the campus details and confirm updates. Attempt to delete a campus and verify its removal from the list and database. Test edge cases like empty fields or duplicate names.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 10,
        "task_title": "Implement Campus Management (CRUD)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          4,
          9
        ],
        "generation_timestamp": "2025-06-19T16:14:49.857338",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.857338",
      "updated_at": "2025-06-19T16:14:49.857338"
    },
    "83": {
      "id": "task_proj_1750308664554_vnllv97tt_11_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_011_Implement_Academic_Year_Structure_Definition.md",
      "content": "# Task 11: Implement Academic Year Structure Definition\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 4, Task 10\n\n## Description\n\nDevelop the Admin UI and backend logic to define and manage academic year structures for each campus.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 10 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend the GraphQL schema with an `AcademicYear` model (e.g., `id: ID!, campusId: ID!, name: String!, startDate: AWSDate!, endDate: AWSDate!`). Develop an Admin UI to create, view, and manage academic years associated with a specific campus. Use Amplify GraphQL for CRUD operations. Ensure validation for start/end dates.\n\n## Testing Checklist\n\n- [ ] As an Admin, select a campus and define a new academic year (e.g., '2024-2025' with start and end dates). Verify the academic year is saved and listed correctly. Attempt to create overlapping academic years or invalid date ranges and confirm error handling.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 11,
        "task_title": "Implement Academic Year Structure Definition",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          4,
          10
        ],
        "generation_timestamp": "2025-06-19T16:14:49.871009",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.871009",
      "updated_at": "2025-06-19T16:14:49.871009"
    },
    "84": {
      "id": "task_proj_1750308664554_vnllv97tt_12_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_012_Implement_Class_&_Subject_Management.md",
      "content": "# Task 12: Implement Class & Subject Management\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 4, Task 11\n\n## Description\n\nDevelop the Admin UI and backend logic for creating and managing classes (with sections) and subjects for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 11 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend GraphQL schema for `Class` (e.g., `id: ID!, academicYearId: ID!, campusId: ID!, name: String!, section: String!`) and `Subject` (e.g., `id: ID!, academicYearId: ID!, campusId: ID!, name: String!, classId: ID!`). Develop Admin UI to create classes with sections and assign subjects to them within a selected academic year. Implement GraphQL mutations and queries for these models.\n\n## Testing Checklist\n\n- [ ] As an Admin, select an academic year. Create a new class (e.g., '10th A'). Add subjects (e.g., 'Mathematics', 'Science') to this class. Verify that classes and subjects are correctly associated and persisted in DynamoDB. Test creating multiple sections for a class.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 12,
        "task_title": "Implement Class & Subject Management",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          4,
          11
        ],
        "generation_timestamp": "2025-06-19T16:14:49.899848",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.899848",
      "updated_at": "2025-06-19T16:14:49.899848"
    },
    "85": {
      "id": "task_proj_1750308664554_vnllv97tt_13_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_013_Implement_Admin_Profile_Approval/Deactivation.md",
      "content": "# Task 13: Implement Admin Profile Approval/Deactivation\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 4, Task 9\n\n## Description\n\nImplement the Admin UI and backend logic to approve or deactivate user profiles (Teacher, Parent) after their creation.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 9 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Develop an Admin UI to list all pending or active `Profile` entries. Add functionality to update a profile's status (e.g., `isActive: Boolean`) or `profileType` (e.g., from `PENDING_TEACHER` to `TEACHER`). This can be done via a GraphQL mutation on the `Profile` model. Ensure proper authorization rules are in place so only Admins can perform this action.\n\n## Testing Checklist\n\n- [ ] Register a new user and create a 'Teacher' profile. As an Admin, navigate to the profile management section. Approve the newly created Teacher profile. Log in as the Teacher and verify access to teacher-specific features. Deactivate a profile and confirm that the associated user can no longer access their specific dashboard.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 13,
        "task_title": "Implement Admin Profile Approval/Deactivation",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          4,
          9
        ],
        "generation_timestamp": "2025-06-19T16:14:49.929666",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.929666",
      "updated_at": "2025-06-19T16:14:49.929666"
    },
    "86": {
      "id": "task_proj_1750308664554_vnllv97tt_14_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_014_Implement_Teacher_Assignment_to_Classes_&_Subjects.md",
      "content": "# Task 14: Implement Teacher Assignment to Classes & Subjects\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 4, Task 12, Task 13\n\n## Description\n\nDevelop the Admin UI and backend logic to assign active teachers to specific subjects and classes for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 12 is completed\n- [ ] Ensure Task 13 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend GraphQL schema for `TeacherAssignment` (e.g., `id: ID!, teacherId: ID!, classId: ID!, subjectId: ID!, academicYearId: ID!, campusId: ID!`). Develop an Admin UI that allows selecting an active teacher, a class, a subject, and an academic year to create an assignment. Use GraphQL mutations to persist these assignments. Ensure teachers can only be assigned to active classes/subjects.\n\n## Testing Checklist\n\n- [ ] As an Admin, assign an active teacher to '10th A' for 'Mathematics' in the current academic year. Verify the assignment is recorded in DynamoDB. Attempt to assign an inactive teacher or to a non-existent class/subject and verify error handling.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 14,
        "task_title": "Implement Teacher Assignment to Classes & Subjects",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          4,
          12,
          13
        ],
        "generation_timestamp": "2025-06-19T16:14:49.954497",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.954497",
      "updated_at": "2025-06-19T16:14:49.954497"
    },
    "87": {
      "id": "task_proj_1750308664554_vnllv97tt_15_1750329889",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_015_Implement_Class_Teacher_Assignment.md",
      "content": "# Task 15: Implement Class Teacher Assignment\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 4, Task 12, Task 14\n\n## Description\n\nDevelop the Admin UI and backend logic to designate a single teacher as the class representative (class teacher) for a specific class.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 12 is completed\n- [ ] Ensure Task 14 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Add a field `classTeacherId: ID` to the `Class` model in the GraphQL schema. Develop an Admin UI to select a class and assign an active teacher as its class teacher. Implement validation logic (potentially via a Lambda function triggered by a GraphQL mutation or careful client-side logic with server-side validation) to ensure only one class teacher can be assigned per class at any given time. If a new teacher is assigned, the previous one is unassigned.\n\n## Testing Checklist\n\n- [ ] As an Admin, assign Teacher A as the class teacher for '10th A'. Verify the assignment. Attempt to assign Teacher B as the class teacher for '10th A'; verify that Teacher A is replaced by Teacher B, or an error is shown if simultaneous assignment is prevented. Confirm the `classTeacherId` field is updated correctly in DynamoDB.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:49*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 15,
        "task_title": "Implement Class Teacher Assignment",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          4,
          12,
          14
        ],
        "generation_timestamp": "2025-06-19T16:14:49.987134",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:49.987134",
      "updated_at": "2025-06-19T16:14:49.987134"
    },
    "88": {
      "id": "task_proj_1750308664554_vnllv97tt_16_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_016_Implement_Student_Assignment_to_Classes.md",
      "content": "# Task 16: Implement Student Assignment to Classes\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 4, Task 12\n\n## Description\n\nDevelop the Admin UI and backend logic to assign students to specific classes for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 12 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend GraphQL schema for `StudentEnrollment` (e.g., `id: ID!, studentId: ID!, classId: ID!, academicYearId: ID!, campusId: ID!`). Assume `studentId` refers to a `Profile` of type `PARENT` which has associated child details, or a dedicated `Student` profile. Develop an Admin UI to select students and assign them to classes within an academic year. Use GraphQL mutations for enrollment.\n\n## Testing Checklist\n\n- [ ] As an Admin, enroll a student (linked to a parent profile) into '10th A' for the current academic year. Verify the enrollment is recorded in DynamoDB. Attempt to enroll the same student into multiple classes for the same academic year and verify appropriate handling (e.g., error or warning).\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 16,
        "task_title": "Implement Student Assignment to Classes",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          4,
          12
        ],
        "generation_timestamp": "2025-06-19T16:14:50.022437",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.022437",
      "updated_at": "2025-06-19T16:14:50.022437"
    },
    "89": {
      "id": "task_proj_1750308664554_vnllv97tt_17_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_017_Implement_Timetable_Management.md",
      "content": "# Task 17: Implement Timetable Management\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 4, Task 12, Task 14\n\n## Description\n\nDevelop the Admin UI and backend logic for generating and managing timetables for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 12 is completed\n- [ ] Ensure Task 14 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend GraphQL schema for `TimetableEntry` (e.g., `id: ID!, classId: ID!, academicYearId: ID!, dayOfWeek: String!, startTime: AWSDateTime!, endTime: AWSDateTime!, subjectId: ID!, teacherId: ID!`). Develop an Admin UI that allows creating, editing, and viewing timetable entries for each class. 'Generation' implies a UI to arrange subjects and assigned teachers into time slots, not automatic generation. For complex validation (e.g., teacher availability), a Lambda function might be invoked via API Gateway.\n\n## Testing Checklist\n\n- [ ] As an Admin, create a timetable for '10th A' for a specific week, assigning subjects and teachers to time slots. Verify that the timetable entries are saved and can be retrieved. Test for conflicts (e.g., same teacher assigned to two classes at the same time) and verify error handling.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 17,
        "task_title": "Implement Timetable Management",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          4,
          12,
          14
        ],
        "generation_timestamp": "2025-06-19T16:14:50.054336",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.054336",
      "updated_at": "2025-06-19T16:14:50.054336"
    },
    "90": {
      "id": "task_proj_1750308664554_vnllv97tt_18_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_018_Implement_Fee_Structure_&_Due_Dates_Management.md",
      "content": "# Task 18: Implement Fee Structure & Due Dates Management\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 4, Task 12\n\n## Description\n\nDevelop the Admin UI and backend logic to define fee structures and breakdown for each class with due dates.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 12 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend GraphQL schema for `FeeStructure` (e.g., `id: ID!, classId: ID!, academicYearId: ID!, campusId: ID!, amount: Float!, breakdown: AWSJSON, dueDate: AWSDate!`). Develop an Admin UI to create and manage fee structures per class, including the total amount, a JSON breakdown of components, and specific due dates. Use GraphQL mutations for persistence.\n\n## Testing Checklist\n\n- [ ] As an Admin, define a fee structure for '10th A' for the current academic year, including a breakdown (e.g., tuition, library, lab fees) and a due date. Verify the fee structure is saved and can be retrieved. Test updating existing fee structures and adding multiple due dates if applicable.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 18,
        "task_title": "Implement Fee Structure & Due Dates Management",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          4,
          12
        ],
        "generation_timestamp": "2025-06-19T16:14:50.075559",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.075559",
      "updated_at": "2025-06-19T16:14:50.075559"
    },
    "91": {
      "id": "task_proj_1750308664554_vnllv97tt_19_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_019_Implement_Transportation_Management.md",
      "content": "# Task 19: Implement Transportation Management\n\n## Overview\n\n**Priority**: Low\n**Status**: Pending\n**Dependencies**: Task 4, Task 10\n\n## Description\n\nDevelop the Admin UI and backend logic to manage transportation routes, stops, driver information, and schedules.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 10 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend GraphQL schema for `TransportRoute` (e.g., `id: ID!, campusId: ID!, name: String!, stops: [String], driverId: ID, schedule: AWSJSON`). Develop an Admin UI to create and manage transportation routes, define stops, assign drivers (who might be users with a specific profile type), and set up schedules. Use GraphQL for CRUD operations.\n\n## Testing Checklist\n\n- [ ] As an Admin, create a new transport route, add several stops, assign a driver, and define a basic schedule. Verify that the transportation data is correctly stored and can be retrieved. Test updating route details and driver assignments.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 19,
        "task_title": "Implement Transportation Management",
        "task_priority": "low",
        "task_status": "pending",
        "dependencies": [
          4,
          10
        ],
        "generation_timestamp": "2025-06-19T16:14:50.096412",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.096412",
      "updated_at": "2025-06-19T16:14:50.096412"
    },
    "92": {
      "id": "task_proj_1750308664554_vnllv97tt_20_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_020_Implement_Academic_Activities_Management.md",
      "content": "# Task 20: Implement Academic Activities Management\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 4, Task 11\n\n## Description\n\nDevelop the Admin UI and backend logic to manage exam timetables, holidays, and plan other academic activities for the year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 11 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend GraphQL schema for `AcademicActivity` (e.g., `id: ID!, campusId: ID!, academicYearId: ID!, type: ActivityType!, name: String!, date: AWSDate!, description: String`). Develop an Admin UI to add and manage different types of academic activities such as exam timetables, holidays, and other events. Use GraphQL mutations for persistence. `ActivityType` could be an enum (e.g., `EXAM`, `HOLIDAY`, `EVENT`).\n\n## Testing Checklist\n\n- [ ] As an Admin, add a 'Mid-Term Exam' activity with a specific date, a 'Diwali Holiday', and a 'Sports Day' event. Verify that these activities are saved and displayed correctly in the list. Test filtering activities by type or date range.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 20,
        "task_title": "Implement Academic Activities Management",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          4,
          11
        ],
        "generation_timestamp": "2025-06-19T16:14:50.116849",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.116849",
      "updated_at": "2025-06-19T16:14:50.116849"
    },
    "93": {
      "id": "task_proj_1750308664554_vnllv97tt_21_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_021_Implement_Teacher_Dashboard_&_Assigned_Class/Subject_Access.md",
      "content": "# Task 21: Implement Teacher Dashboard & Assigned Class/Subject Access\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 9, Task 14\n\n## Description\n\nDevelop the Teacher Dashboard UI to display assigned classes and subjects for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 9 is completed\n- [ ] Ensure Task 14 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Develop the Teacher Dashboard UI. Upon login and profile selection, query `TeacherAssignment` using the logged-in teacher's `profileId` and the current academic year. Display a list of classes and subjects assigned to this teacher. Implement navigation to specific class/subject details.\n\n## Testing Checklist\n\n- [ ] Log in as a Teacher who has been assigned to '10th A' for 'Mathematics'. Verify that the dashboard correctly displays '10th A' and 'Mathematics' as assigned. Log in as a teacher with no assignments and verify the dashboard reflects this.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 21,
        "task_title": "Implement Teacher Dashboard & Assigned Class/Subject Access",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          9,
          14
        ],
        "generation_timestamp": "2025-06-19T16:14:50.138186",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.138186",
      "updated_at": "2025-06-19T16:14:50.138186"
    },
    "94": {
      "id": "task_proj_1750308664554_vnllv97tt_22_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_022_Implement_Student_Approval_into_Classes_(Teacher).md",
      "content": "# Task 22: Implement Student Approval into Classes (Teacher)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 4, Task 16, Task 21\n\n## Description\n\nDevelop the Teacher UI and backend logic to approve students into classes for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 16 is completed\n- [ ] Ensure Task 21 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] If student assignment by Admin (Task 16) is provisional, this task involves the Teacher confirming the student. Add a `status: EnrollmentStatus` field (e.g., `PENDING`, `APPROVED`) to `StudentEnrollment`. Develop a Teacher UI to view pending student enrollments for their assigned classes and approve them. Use GraphQL mutations to update the `StudentEnrollment` status.\n\n## Testing Checklist\n\n- [ ] As an Admin, provisionally assign a student to a class. Log in as the Teacher assigned to that class. Verify the student appears in a 'pending approval' list. Approve the student. Verify the student's enrollment status changes to 'APPROVED' in DynamoDB.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 22,
        "task_title": "Implement Student Approval into Classes (Teacher)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          4,
          16,
          21
        ],
        "generation_timestamp": "2025-06-19T16:14:50.168143",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.168143",
      "updated_at": "2025-06-19T16:14:50.168143"
    },
    "95": {
      "id": "task_proj_1750308664554_vnllv97tt_23_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_023_Implement_Weekly_Student_Attendance_Marking.md",
      "content": "# Task 23: Implement Weekly Student Attendance Marking\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 4, Task 16, Task 21\n\n## Description\n\nDevelop the Teacher UI and backend logic for marking student attendance using a weekly calendar.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 16 is completed\n- [ ] Ensure Task 21 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend GraphQL schema for `AttendanceRecord` (e.g., `id: ID!, studentId: ID!, classId: ID!, academicYearId: ID!, date: AWSDate!, status: AttendanceStatus!, teacherId: ID!`). Develop a Teacher UI with a weekly calendar view. When a date is selected, list all students in the teacher's assigned class. Default all students to 'Present'. Allow the teacher to uncheck (mark 'Absent') specific students. Implement a 'Submit' button to record attendance via GraphQL mutations. `AttendanceStatus` could be an enum (`PRESENT`, `ABSENT`, `LEAVE`).\n\n## Testing Checklist\n\n- [ ] As a Teacher, select a date from the weekly calendar. Mark a few students as absent and submit. Verify that attendance records are created/updated correctly in DynamoDB for each student. View the attendance for that date to confirm accuracy. Test marking all students present.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 23,
        "task_title": "Implement Weekly Student Attendance Marking",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          4,
          16,
          21
        ],
        "generation_timestamp": "2025-06-19T16:14:50.201850",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.201850",
      "updated_at": "2025-06-19T16:14:50.201850"
    },
    "96": {
      "id": "task_proj_1750308664554_vnllv97tt_24_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_024_Implement_Daily_Activities_&_Homework_Entry.md",
      "content": "# Task 24: Implement Daily Activities & Homework Entry\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 4, Task 21\n\n## Description\n\nDevelop the Teacher UI and backend logic for creating tasks and homework entries in the daily diary for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 21 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend GraphQL schema for `DailyDiaryEntry` (e.g., `id: ID!, classId: ID!, academicYearId: ID!, date: AWSDate!, teacherId: ID!, type: EntryType!, title: String!, description: String!, attachments: [String]`). Develop a Teacher UI to create daily diary entries (e.g., 'Homework', 'Classwork', 'Notes') for their assigned classes. Allow specifying a date, title, description, and optional attachments. Use GraphQL mutations for persistence.\n\n## Testing Checklist\n\n- [ ] As a Teacher, select an assigned class and a date. Create a 'Homework' entry with a title and description. Verify the entry is saved in DynamoDB. Create a 'Class Notes' entry. Confirm that entries are associated with the correct class and date.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 24,
        "task_title": "Implement Daily Activities & Homework Entry",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          4,
          21
        ],
        "generation_timestamp": "2025-06-19T16:14:50.221351",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.221351",
      "updated_at": "2025-06-19T16:14:50.221351"
    },
    "97": {
      "id": "task_proj_1750308664554_vnllv97tt_25_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_025_Implement_Assessment_&_Grading_for_Students.md",
      "content": "# Task 25: Implement Assessment & Grading for Students\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 4, Task 16, Task 21\n\n## Description\n\nDevelop the Teacher UI and backend logic for marking and grading tasks/exams for each student.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 16 is completed\n- [ ] Ensure Task 21 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend GraphQL schema for `Assessment` (e.g., `id: ID!, classId: ID!, subjectId: ID!, academicYearId: ID!, name: String!, maxMarks: Int!, date: AWSDate!`) and `Grade` (e.g., `id: ID!, assessmentId: ID!, studentId: ID!, marksObtained: Int!`). Develop a Teacher UI to create new assessments for their assigned classes/subjects. For each assessment, list enrolled students and allow the teacher to input marks obtained. Use GraphQL mutations to save grades.\n\n## Testing Checklist\n\n- [ ] As a Teacher, create a new assessment (e.g., 'Unit Test 1' for 'Mathematics' in '10th A'). Enter marks for several students. Verify that assessment and grade records are correctly stored in DynamoDB. Test updating marks for a student.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 25,
        "task_title": "Implement Assessment & Grading for Students",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          4,
          16,
          21
        ],
        "generation_timestamp": "2025-06-19T16:14:50.255121",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.255121",
      "updated_at": "2025-06-19T16:14:50.255121"
    },
    "98": {
      "id": "task_proj_1750308664554_vnllv97tt_26_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_026_Implement_Results_Publication.md",
      "content": "# Task 26: Implement Results Publication\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 4, Task 25\n\n## Description\n\nDevelop the Teacher UI and backend logic to publish quarterly and half-yearly exam results, making them visible to parents.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 25 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Add a `isPublished: Boolean` field to the `Assessment` model or create a `ResultPublication` model. Develop a Teacher UI to review grades for an assessment and then 'publish' them. Publishing an assessment should set `isPublished` to `true`, making the results accessible to parents. This can be a simple GraphQL mutation. Ensure proper authorization so only the assigned teacher or admin can publish results.\n\n## Testing Checklist\n\n- [ ] As a Teacher, complete grading for an assessment. Publish the results. Verify that the `isPublished` flag is set to `true` in DynamoDB. (Further testing will be done with Parent module to confirm visibility).\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 26,
        "task_title": "Implement Results Publication",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          4,
          25
        ],
        "generation_timestamp": "2025-06-19T16:14:50.289835",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.289835",
      "updated_at": "2025-06-19T16:14:50.289835"
    },
    "99": {
      "id": "task_proj_1750308664554_vnllv97tt_27_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_027_Implement_Teacher-to-Student/Class_Communication.md",
      "content": "# Task 27: Implement Teacher-to-Student/Class Communication\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 4, Task 21\n\n## Description\n\nDevelop the Teacher UI and backend logic to send notifications to all students in a class or to individual students.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 21 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Extend GraphQL schema for `Notification` (e.g., `id: ID!, campusId: ID!, senderId: ID!, targetType: NotificationTargetType!, targetId: ID, message: String!, timestamp: AWSDateTime!`). Develop a Teacher UI to compose and send notifications. Allow selecting 'All students in class' or 'Individual student'. Use GraphQL mutations to create notification records. `NotificationTargetType` could be an enum (`CLASS`, `STUDENT`).\n\n## Testing Checklist\n\n- [ ] As a Teacher, send a notification to '10th A'. Send a notification to a specific student in '10th A'. Verify that notification records are created in DynamoDB with the correct `targetType` and `targetId`. (Further testing will be done with Parent module to confirm receipt).\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 27,
        "task_title": "Implement Teacher-to-Student/Class Communication",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          4,
          21
        ],
        "generation_timestamp": "2025-06-19T16:14:50.333206",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.333206",
      "updated_at": "2025-06-19T16:14:50.333206"
    },
    "100": {
      "id": "task_proj_1750308664554_vnllv97tt_28_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_028_Implement_Parent_Dashboard_&_Child-Specific_Data_Access.md",
      "content": "# Task 28: Implement Parent Dashboard & Child-Specific Data Access\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 9, Task 16\n\n## Description\n\nDevelop the Parent Dashboard UI to display linked children and allow selection to view child-specific data.\n\n## Dependencies Checklist\n- [ ] Ensure Task 9 is completed\n- [ ] Ensure Task 16 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Develop the Parent Dashboard UI. Upon login and profile selection, query `StudentEnrollment` to identify all children associated with the logged-in parent's profile. Display a list of these children. Implement a mechanism (e.g., dropdown, list tile tap) to select a child, which then filters all subsequent data views to that specific child's information.\n\n## Testing Checklist\n\n- [ ] Log in as a Parent who has two children enrolled in the campus. Verify that both children are listed on the dashboard. Select one child and confirm that the UI updates to reflect the selected child's context. Switch between children and verify data changes accordingly.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 28,
        "task_title": "Implement Parent Dashboard & Child-Specific Data Access",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          9,
          16
        ],
        "generation_timestamp": "2025-06-19T16:14:50.370883",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.370883",
      "updated_at": "2025-06-19T16:14:50.370883"
    },
    "101": {
      "id": "task_proj_1750308664554_vnllv97tt_29_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_029_Implement_Student_Attendance_&_Daily_Diary_Viewing_(Parent).md",
      "content": "# Task 29: Implement Student Attendance & Daily Diary Viewing (Parent)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 4, Task 23, Task 24, Task 28\n\n## Description\n\nDevelop the Parent UI to view daily student attendance and overall attendance percentage, and access daily diary entries.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 23 is completed\n- [ ] Ensure Task 24 is completed\n- [ ] Ensure Task 28 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Develop a Parent UI section to display the selected child's attendance. Query `AttendanceRecord` by `studentId` and date range to show daily attendance status. Calculate and display overall attendance percentage. Implement another section to view daily diary entries. Query `DailyDiaryEntry` by `classId` and date range (for the child's class) to display teacher notes, tasks, and homework. Use a weekly calendar for date selection.\n\n## Testing Checklist\n\n- [ ] As a Parent, view the selected child's attendance for a specific week. Verify daily statuses and overall percentage are accurate based on data entered by the teacher. View daily diary entries for the child's class for a specific date and confirm all entries (homework, notes) are visible.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 29,
        "task_title": "Implement Student Attendance & Daily Diary Viewing (Parent)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          4,
          23,
          24,
          28
        ],
        "generation_timestamp": "2025-06-19T16:14:50.404848",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.404848",
      "updated_at": "2025-06-19T16:14:50.404848"
    },
    "102": {
      "id": "task_proj_1750308664554_vnllv97tt_30_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_030_Implement_Results,_Fee_Information,_Timetable,_&_Homework_Viewing_(Parent).md",
      "content": "# Task 30: Implement Results, Fee Information, Timetable, & Homework Viewing (Parent)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 4, Task 17, Task 18, Task 25, Task 26, Task 28, Task 29\n\n## Description\n\nDevelop the Parent UI to view published exam results, fee structure and due dates, child's timetable, and homework tracking.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Ensure Task 17 is completed\n- [ ] Ensure Task 18 is completed\n- [ ] Ensure Task 25 is completed\n- [ ] Ensure Task 26 is completed\n- [ ] Ensure Task 28 is completed\n- [ ] Ensure Task 29 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Develop Parent UI sections for: 1. **Results Monitoring**: Query `Assessment` (where `isPublished: true`) and `Grade` by `studentId` to display published exam results. 2. **Fee Information**: Query `FeeStructure` by `classId` to show fee breakdown and due dates. 3. **Schedule Access**: Query `TimetableEntry` by `classId` to display the child's weekly timetable. 4. **Homework Tracking**: Filter `DailyDiaryEntry` of type 'HOMEWORK' for the child's class to show assignments and their completion status (if applicable, otherwise just list).\n\n## Testing Checklist\n\n- [ ] As a Parent, verify that published exam results for the child are visible. Check the fee structure and due dates. View the child's weekly timetable. Confirm that homework assignments posted by the teacher are displayed correctly. Test with a child who has no published results or pending fees.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:14:50*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 30,
        "task_title": "Implement Results, Fee Information, Timetable, & Homework Viewing (Parent)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          4,
          17,
          18,
          25,
          26,
          28,
          29
        ],
        "generation_timestamp": "2025-06-19T16:14:50.448825",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.448825",
      "updated_at": "2025-06-19T16:14:50.448825"
    },
    "103": {
      "id": "tasks_index_proj_1750308664554_vnllv97tt_1750329890",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "tasks_index",
      "file_name": "Tasks_Index.md",
      "content": "# Tasks Index\n\nGenerated on 2025-06-19 16:14:50\n\nTotal Tasks: 30\n\n## Task Progress Checklist\n\n### High Priority Tasks\n- [ ] **Task 1**: Project Initialization & AWS Amplify Setup\n- [ ] **Task 2**: Configure AWS Cognito for Authentication\n- [ ] **Task 3**: Design & Implement Core DynamoDB Data Models\n- [ ] **Task 4**: Configure Amplify GraphQL API for Core Models\n- [ ] **Task 6**: Implement User Registration Flow\n- [ ] **Task 7**: Implement User Login Flow\n- [ ] **Task 8**: Develop Multi-Profile Selection & Creation Logic\n- [ ] **Task 9**: Implement Profile Persistence & Auto-Redirection\n- [ ] **Task 10**: Implement Campus Management (CRUD)\n- [ ] **Task 12**: Implement Class & Subject Management\n- [ ] **Task 13**: Implement Admin Profile Approval/Deactivation\n- [ ] **Task 17**: Implement Timetable Management\n- [ ] **Task 21**: Implement Teacher Dashboard & Assigned Class/Subject Access\n- [ ] **Task 22**: Implement Student Approval into Classes (Teacher)\n- [ ] **Task 23**: Implement Weekly Student Attendance Marking\n- [ ] **Task 25**: Implement Assessment & Grading for Students\n- [ ] **Task 26**: Implement Results Publication\n- [ ] **Task 28**: Implement Parent Dashboard & Child-Specific Data Access\n- [ ] **Task 29**: Implement Student Attendance & Daily Diary Viewing (Parent)\n- [ ] **Task 30**: Implement Results, Fee Information, Timetable, & Homework Viewing (Parent)\n\n### Medium Priority Tasks\n- [ ] **Task 5**: Implement Base Flutter UI Structure & Navigation\n- [ ] **Task 11**: Implement Academic Year Structure Definition\n- [ ] **Task 14**: Implement Teacher Assignment to Classes & Subjects\n- [ ] **Task 15**: Implement Class Teacher Assignment\n- [ ] **Task 16**: Implement Student Assignment to Classes\n- [ ] **Task 18**: Implement Fee Structure & Due Dates Management\n- [ ] **Task 20**: Implement Academic Activities Management\n- [ ] **Task 24**: Implement Daily Activities & Homework Entry\n- [ ] **Task 27**: Implement Teacher-to-Student/Class Communication\n\n### Low Priority Tasks\n- [ ] **Task 19**: Implement Transportation Management\n\n## Project Completion Checklist\n\n- [ ] All high priority tasks completed\n- [ ] All medium priority tasks completed\n- [ ] All low priority tasks completed\n- [ ] Integration testing completed\n- [ ] Documentation finalized\n- [ ] Code review completed\n- [ ] Performance testing completed\n- [ ] Security review completed\n- [ ] Deployment preparation completed\n- [ ] Project ready for release\n\n## Task Details Table\n\n| ID | Title | Priority | Status | Dependencies |\n|----|-------|----------|--------|--------------|\n| 1 | Project Initialization & AWS Amplify Setup | high | pending | None |\n| 2 | Configure AWS Cognito for Authentication | high | pending | #1 |\n| 3 | Design & Implement Core DynamoDB Data Models | high | pending | #2 |\n| 4 | Configure Amplify GraphQL API for Core Models | high | pending | #3 |\n| 5 | Implement Base Flutter UI Structure & Navigation | medium | pending | #1 |\n| 6 | Implement User Registration Flow | high | pending | #2, #5 |\n| 7 | Implement User Login Flow | high | pending | #2, #5 |\n| 8 | Develop Multi-Profile Selection & Creation Logic | high | pending | #3, #4, #7 |\n| 9 | Implement Profile Persistence & Auto-Redirection | high | pending | #8 |\n| 10 | Implement Campus Management (CRUD) | high | pending | #4, #9 |\n| 11 | Implement Academic Year Structure Definition | medium | pending | #4, #10 |\n| 12 | Implement Class & Subject Management | high | pending | #4, #11 |\n| 13 | Implement Admin Profile Approval/Deactivation | high | pending | #4, #9 |\n| 14 | Implement Teacher Assignment to Classes & Subjects | medium | pending | #4, #12, #13 |\n| 15 | Implement Class Teacher Assignment | medium | pending | #4, #12, #14 |\n| 16 | Implement Student Assignment to Classes | medium | pending | #4, #12 |\n| 17 | Implement Timetable Management | high | pending | #4, #12, #14 |\n| 18 | Implement Fee Structure & Due Dates Management | medium | pending | #4, #12 |\n| 19 | Implement Transportation Management | low | pending | #4, #10 |\n| 20 | Implement Academic Activities Management | medium | pending | #4, #11 |\n| 21 | Implement Teacher Dashboard & Assigned Class/Subject Access | high | pending | #9, #14 |\n| 22 | Implement Student Approval into Classes (Teacher) | high | pending | #4, #16, #21 |\n| 23 | Implement Weekly Student Attendance Marking | high | pending | #4, #16, #21 |\n| 24 | Implement Daily Activities & Homework Entry | medium | pending | #4, #21 |\n| 25 | Implement Assessment & Grading for Students | high | pending | #4, #16, #21 |\n| 26 | Implement Results Publication | high | pending | #4, #25 |\n| 27 | Implement Teacher-to-Student/Class Communication | medium | pending | #4, #21 |\n| 28 | Implement Parent Dashboard & Child-Specific Data Access | high | pending | #9, #16 |\n| 29 | Implement Student Attendance & Daily Diary Viewing (Parent) | high | pending | #4, #23, #24, #28 |\n| 30 | Implement Results, Fee Information, Timetable, & Homework Viewing (Parent) | high | pending | #4, #17, #18, #25, #26, #28, #29 |\n\n## Task Dependencies\n\nThe following shows the task dependencies:\n\n```\nTask 2 depends on: Task 1\nTask 3 depends on: Task 2\nTask 4 depends on: Task 3\nTask 5 depends on: Task 1\nTask 6 depends on: Task 2, Task 5\nTask 7 depends on: Task 2, Task 5\nTask 8 depends on: Task 3, Task 4, Task 7\nTask 9 depends on: Task 8\nTask 10 depends on: Task 4, Task 9\nTask 11 depends on: Task 4, Task 10\nTask 12 depends on: Task 4, Task 11\nTask 13 depends on: Task 4, Task 9\nTask 14 depends on: Task 4, Task 12, Task 13\nTask 15 depends on: Task 4, Task 12, Task 14\nTask 16 depends on: Task 4, Task 12\nTask 17 depends on: Task 4, Task 12, Task 14\nTask 18 depends on: Task 4, Task 12\nTask 19 depends on: Task 4, Task 10\nTask 20 depends on: Task 4, Task 11\nTask 21 depends on: Task 9, Task 14\nTask 22 depends on: Task 4, Task 16, Task 21\nTask 23 depends on: Task 4, Task 16, Task 21\nTask 24 depends on: Task 4, Task 21\nTask 25 depends on: Task 4, Task 16, Task 21\nTask 26 depends on: Task 4, Task 25\nTask 27 depends on: Task 4, Task 21\nTask 28 depends on: Task 9, Task 16\nTask 29 depends on: Task 4, Task 23, Task 24, Task 28\nTask 30 depends on: Task 4, Task 17, Task 18, Task 25, Task 26, Task 28, Task 29\n```\n",
      "metadata": {
        "generated_from": "task_master",
        "tasks_count": 30,
        "generation_timestamp": "2025-06-19T16:14:50.482690",
        "is_primary": true
      },
      "status": "generated",
      "created_at": "2025-06-19T16:14:50.482690",
      "updated_at": "2025-06-19T16:14:50.482690"
    },
    "104": {
      "id": "overview_proj_1750308664554_vnllv97tt_1750330665",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "project_overview",
      "file_name": "ProjectOverview.md",
      "content": "# Project Overview\n\nGenerated from Task Master on 2025-06-19 16:27:45\n\n## Summary\n\nThis project consists of 30 main tasks generated from the Product Requirements Document (PRD).\n\n## Project Setup Checklist\n\n- [ ] Review all project requirements and constraints\n- [ ] Set up development environment\n- [ ] Initialize project repository\n- [ ] Configure development tools and dependencies\n- [ ] Set up testing framework\n- [ ] Configure CI/CD pipeline (if applicable)\n- [ ] Set up documentation structure\n\n## Task Breakdown Checklist\n\n### High Priority Tasks\n- [ ] **Task 1**: Project Initialization & AWS Amplify Setup\n- [ ] **Task 2**: Configure AWS Cognito for Authentication\n- [ ] **Task 3**: Design & Implement Core DynamoDB Data Models\n- [ ] **Task 4**: Configure Amplify GraphQL API for Core Models\n- [ ] **Task 6**: Implement User Registration Flow\n- [ ] **Task 7**: Implement User Login Flow\n- [ ] **Task 8**: Develop Multi-Profile Selection & Creation Logic\n- [ ] **Task 9**: Implement Profile Persistence & Auto-Redirection\n- [ ] **Task 10**: Implement Campus Management (CRUD)\n- [ ] **Task 12**: Implement Class & Subject Management\n- [ ] **Task 13**: Implement Admin Profile Approval/Deactivation\n- [ ] **Task 17**: Implement Timetable Management\n- [ ] **Task 22**: Implement Teacher Dashboard & Assigned Class/Subject Access\n- [ ] **Task 23**: Implement Student Approval into Classes (Teacher)\n- [ ] **Task 24**: Implement Weekly Student Attendance Marking\n- [ ] **Task 26**: Implement Assessment & Grading for Students (Teacher)\n- [ ] **Task 27**: Implement Results Publication (Teacher)\n- [ ] **Task 30**: Implement Parent Data Viewing (Attendance, Diary, Results, Fees, Timetable, Homework, Notifications, Calendar, Leave Requests)\n\n### Medium Priority Tasks\n- [ ] **Task 5**: Implement Base Flutter UI Structure & Navigation\n- [ ] **Task 11**: Implement Academic Year Structure Definition\n- [ ] **Task 14**: Implement Teacher Assignment to Classes & Subjects\n- [ ] **Task 15**: Implement Class Teacher Assignment\n- [ ] **Task 16**: Implement Student Assignment to Classes\n- [ ] **Task 18**: Implement Fee Structure & Due Dates Management\n- [ ] **Task 20**: Implement Academic Activities Management\n- [ ] **Task 21**: Implement Admin Communication Module\n- [ ] **Task 25**: Implement Daily Activities & Homework Entry (Teacher)\n- [ ] **Task 28**: Implement Teacher Communication Module\n- [ ] **Task 29**: Implement Teacher Leave Management & Parent Dashboard\n\n### Low Priority Tasks\n- [ ] **Task 19**: Implement Transportation Management\n\n## Project Milestones Checklist\n\n- [ ] Phase 1: High priority tasks completed\n- [ ] Phase 2: Medium priority tasks completed\n- [ ] Phase 3: Low priority tasks completed\n- [ ] Integration testing completed\n- [ ] Performance testing completed\n- [ ] Security review completed\n- [ ] Documentation finalized\n- [ ] Code review completed\n- [ ] Deployment preparation completed\n- [ ] Project ready for release\n\n## Quality Assurance Checklist\n\n- [ ] All code follows project standards\n- [ ] All tests are passing\n- [ ] Code coverage meets requirements\n- [ ] No security vulnerabilities\n- [ ] Performance requirements met\n- [ ] Documentation is complete and accurate\n- [ ] All dependencies are up to date\n- [ ] Error handling is comprehensive\n\n## Implementation Notes\n\nEach task has been designed to be atomic and focused on a single responsibility. Tasks are ordered logically considering dependencies and implementation sequence.\n\nFor detailed information about each task, refer to the individual task files.\n",
      "metadata": {
        "generated_from": "task_master",
        "tasks_count": 30,
        "generation_timestamp": "2025-06-19T16:27:45.841944",
        "is_primary": true
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:45.841944",
      "updated_at": "2025-06-19T16:27:45.841944"
    },
    "105": {
      "id": "task_proj_1750308664554_vnllv97tt_1_1750330665",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_001_Project_Initialization_&_AWS_Amplify_Setup.md",
      "content": "# Task 1: Project Initialization & AWS Amplify Setup\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: None\n\n## Description\n\nInitialize the Flutter project and configure AWS Amplify for backend integration.\n\n## Dependencies Checklist\n- [ ] Confirm no dependencies are required\n- [ ] Verify task can be started independently\n\n## Implementation Details Checklist\n\n- [ ] Initialize a new Flutter project using 'flutter create campus_pilot'. Install the Amplify CLI globally and configure it with 'amplify configure'. In the project root, run 'amplify init' to set up the Amplify project, selecting appropriate defaults for the environment and editor. This will provision basic AWS resources like an S3 bucket for hosting.\n\n## Testing Checklist\n\n- [ ] Verify the Flutter project structure is created correctly. Run 'amplify status' to confirm the Amplify project is initialized and shows the correct backend environment. Check the AWS S3 console for the newly created Amplify hosting bucket.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:45*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 1,
        "task_title": "Project Initialization & AWS Amplify Setup",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [],
        "generation_timestamp": "2025-06-19T16:27:45.881282",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:45.881282",
      "updated_at": "2025-06-19T16:27:45.881282"
    },
    "106": {
      "id": "task_proj_1750308664554_vnllv97tt_2_1750330665",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_002_Configure_AWS_Cognito_for_Authentication.md",
      "content": "# Task 2: Configure AWS Cognito for Authentication\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 1\n\n## Description\n\nSet up AWS Cognito User Pool for user registration and login, defining necessary user attributes.\n\n## Dependencies Checklist\n- [ ] Ensure Task 1 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Run 'amplify add auth' in the project directory. Choose 'Default configuration' and 'Email' for sign-in methods. Add 'name' as a required attribute. This will create a Cognito User Pool and an Identity Pool. Ensure the configuration allows for email and password-based authentication.\n\n## Testing Checklist\n\n- [ ] Run 'amplify push' to deploy the authentication resources. Verify the Cognito User Pool and Identity Pool are created in the AWS console. Use the Cognito console to manually create a test user and confirm attributes are correctly configured.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:45*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 2,
        "task_title": "Configure AWS Cognito for Authentication",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          1
        ],
        "generation_timestamp": "2025-06-19T16:27:45.915974",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:45.915974",
      "updated_at": "2025-06-19T16:27:45.915974"
    },
    "107": {
      "id": "task_proj_1750308664554_vnllv97tt_3_1750330665",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_003_Design_&_Implement_Core_DynamoDB_Data_Models.md",
      "content": "# Task 3: Design & Implement Core DynamoDB Data Models\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 2\n\n## Description\n\nDefine the GraphQL schema for core entities like User, Profile, Campus, AcademicYear, Class, Subject, etc., using Amplify DataStore/GraphQL Transform.\n\n## Dependencies Checklist\n- [ ] Ensure Task 2 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Run 'amplify add api' and select 'GraphQL'. Choose 'API key' for authorization for initial development. Define the schema in 'amplify/backend/api/<api-name>/schema.graphql'. Models should include: 'User' (linked to Cognito via custom resolver or direct ID), 'Profile' (with fields like 'id', 'userId', 'type: Admin | Teacher | Parent', 'status: pending | approved | deactivated', 'campusId'), 'Campus', 'AcademicYear', 'Class', 'Subject', 'TeacherAssignment', 'ClassTeacherAssignment', 'StudentAssignment', 'TimetableEntry', 'FeeStructure', 'TransportationRoute', 'TransportationStop', 'Driver', 'Vehicle', 'ExamTimetableEntry', 'Holiday', 'AcademicActivity', 'Notification', 'AttendanceRecord', 'DailyDiaryEntry', 'Assessment', 'LeaveRequest'. Use '@model', '@auth(rules: [...])', and '@connection' directives to define relationships and access control.\n\n## Testing Checklist\n\n- [ ] Review the 'schema.graphql' file for correctness and adherence to PRD requirements. Run 'amplify push --yes' to deploy the API and associated DynamoDB tables. Verify that DynamoDB tables corresponding to each @model are created in the AWS console.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:45*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 3,
        "task_title": "Design & Implement Core DynamoDB Data Models",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          2
        ],
        "generation_timestamp": "2025-06-19T16:27:45.942764",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:45.942764",
      "updated_at": "2025-06-19T16:27:45.942764"
    },
    "108": {
      "id": "task_proj_1750308664554_vnllv97tt_4_1750330665",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_004_Configure_Amplify_GraphQL_API_for_Core_Models.md",
      "content": "# Task 4: Configure Amplify GraphQL API for Core Models\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 3\n\n## Description\n\nDeploy the GraphQL API and generate client-side models for Flutter to interact with the backend.\n\n## Dependencies Checklist\n- [ ] Ensure Task 3 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] After defining the GraphQL schema, run 'amplify push' to deploy the AppSync API and provision the DynamoDB tables. Once deployed, execute 'amplify codegen models' to generate the Dart data models in the Flutter project's 'lib/models' directory. These models will be used for type-safe interactions with the GraphQL API.\n\n## Testing Checklist\n\n- [ ] Verify that the AppSync API endpoint is created and accessible in the AWS console. Confirm that the Dart models are successfully generated in the Flutter project under 'lib/models' and reflect the defined GraphQL schema. Perform a simple test query/mutation using the AWS AppSync console to ensure the API is functional.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:45*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 4,
        "task_title": "Configure Amplify GraphQL API for Core Models",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          3
        ],
        "generation_timestamp": "2025-06-19T16:27:45.959375",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:45.959375",
      "updated_at": "2025-06-19T16:27:45.959375"
    },
    "109": {
      "id": "task_proj_1750308664554_vnllv97tt_5_1750330665",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_005_Implement_Base_Flutter_UI_Structure_&_Navigation.md",
      "content": "# Task 5: Implement Base Flutter UI Structure & Navigation\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 4\n\n## Description\n\nSet up the foundational Flutter UI structure, including basic navigation and placeholder dashboards for different user roles.\n\n## Dependencies Checklist\n- [ ] Ensure Task 4 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create the main 'MaterialApp' widget. Implement a routing solution (e.g., 'go_router' or 'Navigator 2.0') to manage navigation between different screens. Design a splash screen and create basic placeholder screens for the Admin, Teacher, and Parent dashboards. Ensure smooth transitions between these screens.\n\n## Testing Checklist\n\n- [ ] Run the Flutter application on an emulator/device. Verify that the app launches without errors, the splash screen is displayed, and basic navigation between the placeholder dashboards works as expected. Check for any UI layout issues on different screen sizes.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:45*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 5,
        "task_title": "Implement Base Flutter UI Structure & Navigation",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          4
        ],
        "generation_timestamp": "2025-06-19T16:27:45.973424",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:45.973424",
      "updated_at": "2025-06-19T16:27:45.973424"
    },
    "110": {
      "id": "task_proj_1750308664554_vnllv97tt_6_1750330665",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_006_Implement_User_Registration_Flow.md",
      "content": "# Task 6: Implement User Registration Flow\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 5\n\n## Description\n\nDevelop the Flutter UI for user registration and integrate it with Amplify Auth for backend user creation.\n\n## Dependencies Checklist\n- [ ] Ensure Task 5 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create a registration screen with input fields for email, password, and name. Implement a button to trigger the registration process. Use 'Amplify.Auth.signUp()' to send user credentials to Cognito. Handle potential errors (e.g., existing user, weak password). If email confirmation is enabled, implement the confirmation code input UI.\n\n## Testing Checklist\n\n- [ ] Attempt to register a new user with valid credentials. Verify that the user account is created in the Cognito User Pool. Test with invalid email formats, short passwords, and attempts to register with an already existing email. If confirmation is required, test the confirmation flow.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:45*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 6,
        "task_title": "Implement User Registration Flow",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          5
        ],
        "generation_timestamp": "2025-06-19T16:27:45.987585",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:45.987585",
      "updated_at": "2025-06-19T16:27:45.987585"
    },
    "111": {
      "id": "task_proj_1750308664554_vnllv97tt_7_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_007_Implement_User_Login_Flow.md",
      "content": "# Task 7: Implement User Login Flow\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 6\n\n## Description\n\nDevelop the Flutter UI for user login and integrate it with Amplify Auth for user authentication.\n\n## Dependencies Checklist\n- [ ] Ensure Task 6 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create a login screen with input fields for email and password. Implement a login button that calls 'Amplify.Auth.signIn()'. Handle successful login by navigating to a post-login screen (e.g., profile selection). Implement error handling for incorrect credentials or network issues. Manage user session state using Amplify Auth listeners.\n\n## Testing Checklist\n\n- [ ] Attempt to log in with a previously registered user. Verify successful authentication redirects to the appropriate screen. Test with incorrect email/password combinations. Verify that the user session persists across app restarts (if configured).\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 7,
        "task_title": "Implement User Login Flow",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          6
        ],
        "generation_timestamp": "2025-06-19T16:27:46.000754",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.000754",
      "updated_at": "2025-06-19T16:27:46.000754"
    },
    "112": {
      "id": "task_proj_1750308664554_vnllv97tt_8_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_008_Develop_Multi-Profile_Selection_&_Creation_Logic.md",
      "content": "# Task 8: Develop Multi-Profile Selection & Creation Logic\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 7\n\n## Description\n\nImplement the UI and backend logic for users to select an existing profile or create new profiles (Admin, Teacher, Parent) immediately after login.\n\n## Dependencies Checklist\n- [ ] Ensure Task 7 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] After successful login, query the GraphQL API for 'Profile' models associated with the current 'Amplify.Auth.currentUser.userId'. If no profiles exist, display a UI allowing the user to create a new 'Profile' (Admin, Teacher, or Parent), including campus selection and required details. If profiles exist, display a list for selection. Use GraphQL mutations (e.g., 'createProfile') to persist new profiles.\n\n## Testing Checklist\n\n- [ ] Log in as a new user with no existing profiles; verify the profile creation UI is presented. Create an 'Admin' profile and confirm it's saved. Log in as a user with multiple profiles; verify the profile selection screen appears and allows choosing a profile. Check that profile data is correctly stored in DynamoDB.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 8,
        "task_title": "Develop Multi-Profile Selection & Creation Logic",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          7
        ],
        "generation_timestamp": "2025-06-19T16:27:46.014517",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.014517",
      "updated_at": "2025-06-19T16:27:46.014517"
    },
    "113": {
      "id": "task_proj_1750308664554_vnllv97tt_9_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_009_Implement_Profile_Persistence_&_Auto-Redirection.md",
      "content": "# Task 9: Implement Profile Persistence & Auto-Redirection\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 8\n\n## Description\n\nStore the selected user profile locally and automatically redirect the user to their specific dashboard on subsequent app launches.\n\n## Dependencies Checklist\n- [ ] Ensure Task 8 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Upon profile selection, store the chosen 'profileId' and 'profileType' (e.g., 'Admin', 'Teacher', 'Parent') using 'shared_preferences' or 'flutter_secure_storage'. On app launch, after checking authentication status, retrieve the stored profile information. If valid, fetch the full profile details from GraphQL and navigate directly to the corresponding dashboard (AdminDashboard, TeacherDashboard, ParentDashboard).\n\n## Testing Checklist\n\n- [ ] Select a profile, then close the app completely and reopen it. Verify that the app automatically redirects to the dashboard of the previously selected profile without requiring re-selection. Test with different profile types.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 9,
        "task_title": "Implement Profile Persistence & Auto-Redirection",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          8
        ],
        "generation_timestamp": "2025-06-19T16:27:46.028511",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.028511",
      "updated_at": "2025-06-19T16:27:46.028511"
    },
    "114": {
      "id": "task_proj_1750308664554_vnllv97tt_10_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_010_Implement_Campus_Management_(CRUD).md",
      "content": "# Task 10: Implement Campus Management (CRUD)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 9\n\n## Description\n\nDevelop UI and backend logic for Admin users to set up, configure, and manage campus settings (Create, Read, Update, Delete).\n\n## Dependencies Checklist\n- [ ] Ensure Task 9 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create an Admin UI screen for 'Campus Management'. Implement forms for creating new campuses, displaying a list of existing campuses, and providing options to edit or deactivate/delete campus entries. Use Amplify DataStore or GraphQL mutations (e.g., 'createCampus', 'updateCampus', 'deleteCampus') and queries (e.g., 'listCampuses') to interact with the 'Campus' model in DynamoDB.\n\n## Testing Checklist\n\n- [ ] Log in as an Admin. Create a new campus, verify it appears in the list. Edit campus details and confirm updates. Attempt to deactivate/delete a campus. Verify all operations reflect correctly in the UI and in the DynamoDB 'Campus' table.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 10,
        "task_title": "Implement Campus Management (CRUD)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          9
        ],
        "generation_timestamp": "2025-06-19T16:27:46.042484",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.042484",
      "updated_at": "2025-06-19T16:27:46.042484"
    },
    "115": {
      "id": "task_proj_1750308664554_vnllv97tt_11_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_011_Implement_Academic_Year_Structure_Definition.md",
      "content": "# Task 11: Implement Academic Year Structure Definition\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 10\n\n## Description\n\nDevelop UI and backend logic for Admin to define the academic year structure for each campus.\n\n## Dependencies Checklist\n- [ ] Ensure Task 10 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create an Admin UI screen for 'Academic Year Management'. Implement forms to define new 'AcademicYear' entries, including start date, end date, and a descriptive name (e.g., '2024-2025'). Ensure each academic year is linked to a specific 'Campus'. Use GraphQL mutations and queries for the 'AcademicYear' model.\n\n## Testing Checklist\n\n- [ ] Log in as an Admin. Create a new academic year for a selected campus. Verify the academic year is successfully saved and listed. Test with overlapping dates or invalid date ranges to ensure proper validation.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 11,
        "task_title": "Implement Academic Year Structure Definition",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          10
        ],
        "generation_timestamp": "2025-06-19T16:27:46.055783",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.055783",
      "updated_at": "2025-06-19T16:27:46.055783"
    },
    "116": {
      "id": "task_proj_1750308664554_vnllv97tt_12_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_012_Implement_Class_&_Subject_Management.md",
      "content": "# Task 12: Implement Class & Subject Management\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 11\n\n## Description\n\nDevelop UI and backend logic for Admin to create classes (with sections) and subjects for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 11 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create Admin UI screens for 'Class Management' and 'Subject Management'. Implement forms to create 'Class' entries (including a 'section' attribute, e.g., '10 A') and 'Subject' entries. Ensure these are linked to a specific 'AcademicYear' and 'Campus'. Use GraphQL mutations and queries for 'Class' and 'Subject' models.\n\n## Testing Checklist\n\n- [ ] Log in as an Admin. Create a new class (e.g., 'Class 10', 'Section A') and a new subject (e.g., 'Mathematics'). Verify that these are correctly associated with the current academic year and campus, and appear in their respective lists.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 12,
        "task_title": "Implement Class & Subject Management",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          11
        ],
        "generation_timestamp": "2025-06-19T16:27:46.069454",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.069454",
      "updated_at": "2025-06-19T16:27:46.069454"
    },
    "117": {
      "id": "task_proj_1750308664554_vnllv97tt_13_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_013_Implement_Admin_Profile_Approval/Deactivation.md",
      "content": "# Task 13: Implement Admin Profile Approval/Deactivation\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 12\n\n## Description\n\nDevelop UI and backend logic for Admin to approve or deactivate user profiles (e.g., newly created Teacher or Parent profiles).\n\n## Dependencies Checklist\n- [ ] Ensure Task 12 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create an Admin UI screen to list all 'Profile's, especially those with a 'status' of 'pending'. Provide actions to change a profile's status to 'approved' or 'deactivated'. Use GraphQL mutations to update the 'status' field of the 'Profile' model. Implement appropriate authorization rules to ensure only Admins can perform this action.\n\n## Testing Checklist\n\n- [ ] Register a new user and create a 'Teacher' profile. Log in as an Admin. Verify the new 'Teacher' profile appears with 'pending' status. Approve the profile. Log out of Admin and log in as the Teacher; verify access is granted. Deactivate the Teacher profile and verify access is revoked.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 13,
        "task_title": "Implement Admin Profile Approval/Deactivation",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          12
        ],
        "generation_timestamp": "2025-06-19T16:27:46.084082",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.084082",
      "updated_at": "2025-06-19T16:27:46.084082"
    },
    "118": {
      "id": "task_proj_1750308664554_vnllv97tt_14_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_014_Implement_Teacher_Assignment_to_Classes_&_Subjects.md",
      "content": "# Task 14: Implement Teacher Assignment to Classes & Subjects\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 13\n\n## Description\n\nDevelop UI and backend logic for Admin to assign active teachers to specific subjects and classes for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 13 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create an Admin UI screen for 'Teacher Assignment'. Allow selection of an 'approved' 'TeacherProfile'. Then, enable assigning this teacher to specific 'Class' and 'Subject' combinations within an 'AcademicYear'. Define a join model (e.g., 'TeacherClassSubjectAssignment') in GraphQL to manage this many-to-many relationship. Use GraphQL mutations to create and manage these assignments.\n\n## Testing Checklist\n\n- [ ] Log in as an Admin. Assign an active teacher to 'Class 10 A' for 'Mathematics'. Verify the assignment is recorded in the database. Log in as the assigned teacher and verify they can see their assigned classes and subjects (this will be fully tested in Task 22).\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 14,
        "task_title": "Implement Teacher Assignment to Classes & Subjects",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          13
        ],
        "generation_timestamp": "2025-06-19T16:27:46.097474",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.097474",
      "updated_at": "2025-06-19T16:27:46.097474"
    },
    "119": {
      "id": "task_proj_1750308664554_vnllv97tt_15_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_015_Implement_Class_Teacher_Assignment.md",
      "content": "# Task 15: Implement Class Teacher Assignment\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 14\n\n## Description\n\nDevelop UI and backend logic for Admin to designate a teacher as the class representative (class teacher) for a specific class.\n\n## Dependencies Checklist\n- [ ] Ensure Task 14 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Enhance the 'Class' model or create a specific assignment model to include a 'classTeacherId' field, referencing a 'TeacherProfile'. Implement Admin UI to select a 'Class' and assign an 'approved' 'TeacherProfile' as its class teacher. Enforce a uniqueness constraint to ensure only one class teacher per class. Use GraphQL mutations to update this assignment.\n\n## Testing Checklist\n\n- [ ] Log in as an Admin. Assign 'Ms. Jones' as the class teacher for 'Class 8 B'. Attempt to assign another teacher to the same class as class teacher; verify the system prevents this or prompts for replacement. Verify the assignment is correctly stored.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 15,
        "task_title": "Implement Class Teacher Assignment",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          14
        ],
        "generation_timestamp": "2025-06-19T16:27:46.111495",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.111495",
      "updated_at": "2025-06-19T16:27:46.111495"
    },
    "120": {
      "id": "task_proj_1750308664554_vnllv97tt_16_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_016_Implement_Student_Assignment_to_Classes.md",
      "content": "# Task 16: Implement Student Assignment to Classes\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 15\n\n## Description\n\nDevelop UI and backend logic for Admin to assign students to classes for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 15 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create an Admin UI screen for 'Student Management' and 'Student Assignment'. Allow adding new 'StudentProfile' entries (linked to a 'ParentProfile' if applicable). Implement functionality to assign 'StudentProfile's to specific 'Class'es for an 'AcademicYear'. Define a join model (e.g., 'StudentClassAssignment') in GraphQL to manage this relationship. Use GraphQL mutations for assignment.\n\n## Testing Checklist\n\n- [ ] Log in as an Admin. Add a new student and assign them to 'Class 10 A'. Verify the assignment is recorded in the database. Check that the student is correctly linked to the class and academic year.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 16,
        "task_title": "Implement Student Assignment to Classes",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          15
        ],
        "generation_timestamp": "2025-06-19T16:27:46.128670",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.128670",
      "updated_at": "2025-06-19T16:27:46.128670"
    },
    "121": {
      "id": "task_proj_1750308664554_vnllv97tt_17_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_017_Implement_Timetable_Management.md",
      "content": "# Task 17: Implement Timetable Management\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 16\n\n## Description\n\nDevelop UI and backend logic for Admin to generate and manage timetables for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 16 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create an Admin UI screen for 'Timetable Management'. Implement forms to create 'TimetableEntry' records, including fields for 'classId', 'subjectId', 'teacherId', 'dayOfWeek', 'startTime', and 'endTime'. Provide options to view, edit, and delete existing timetable entries. Use GraphQL mutations and queries for the 'TimetableEntry' model.\n\n## Testing Checklist\n\n- [ ] Log in as an Admin. Create a timetable entry for 'Class 10 A', 'Mathematics', 'Mr. Smith' on 'Monday' from '9:00 AM' to '10:00 AM'. Verify the entry is saved and displayed correctly in the timetable view. Test editing and deleting entries.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 17,
        "task_title": "Implement Timetable Management",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          16
        ],
        "generation_timestamp": "2025-06-19T16:27:46.144632",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.144632",
      "updated_at": "2025-06-19T16:27:46.144632"
    },
    "122": {
      "id": "task_proj_1750308664554_vnllv97tt_18_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_018_Implement_Fee_Structure_&_Due_Dates_Management.md",
      "content": "# Task 18: Implement Fee Structure & Due Dates Management\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 17\n\n## Description\n\nDevelop UI and backend logic for Admin to add fee structures and breakdown for each class with due dates.\n\n## Dependencies Checklist\n- [ ] Ensure Task 17 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create an Admin UI screen for 'Fee Management'. Implement forms to define 'FeeStructure' entries for each 'Class', including 'amount', 'description' (e.g., 'Tuition Fee', 'Exam Fee'), and 'dueDate'. Use GraphQL mutations and queries for the 'FeeStructure' model. Ensure fees can be associated with a specific academic year.\n\n## Testing Checklist\n\n- [ ] Log in as an Admin. Define a fee structure for 'Class 10 A' with multiple components and due dates. Verify the fee details are saved and retrievable. Test updating and deleting fee entries.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 18,
        "task_title": "Implement Fee Structure & Due Dates Management",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          17
        ],
        "generation_timestamp": "2025-06-19T16:27:46.161859",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.161859",
      "updated_at": "2025-06-19T16:27:46.161859"
    },
    "123": {
      "id": "task_proj_1750308664554_vnllv97tt_19_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_019_Implement_Transportation_Management.md",
      "content": "# Task 19: Implement Transportation Management\n\n## Overview\n\n**Priority**: Low\n**Status**: Pending\n**Dependencies**: Task 17\n\n## Description\n\nDevelop UI and backend logic for Admin to manage transportation routes, stops, driver information, and schedules for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 17 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create an Admin UI screen for 'Transportation Management'. Implement forms and lists for managing 'TransportationRoute', 'TransportationStop', 'Driver', and 'Vehicle' models. Allow linking drivers to vehicles and routes to stops. Use GraphQL mutations and queries for these models.\n\n## Testing Checklist\n\n- [ ] Log in as an Admin. Add a new transportation route, define stops, add a driver, and assign a vehicle. Verify all transportation-related data is correctly stored and displayed.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 19,
        "task_title": "Implement Transportation Management",
        "task_priority": "low",
        "task_status": "pending",
        "dependencies": [
          17
        ],
        "generation_timestamp": "2025-06-19T16:27:46.175592",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.175592",
      "updated_at": "2025-06-19T16:27:46.175592"
    },
    "124": {
      "id": "task_proj_1750308664554_vnllv97tt_20_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_020_Implement_Academic_Activities_Management.md",
      "content": "# Task 20: Implement Academic Activities Management\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 17\n\n## Description\n\nDevelop UI and backend logic for Admin to manage exam timetables, holidays, and plan academic activities for the year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 17 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create an Admin UI screen for 'Academic Activities'. Implement forms and lists for managing 'ExamTimetableEntry', 'Holiday', and general 'AcademicActivity' entries. Ensure these activities can be linked to the academic year. Use GraphQL mutations and queries for these models.\n\n## Testing Checklist\n\n- [ ] Log in as an Admin. Add a new holiday, an exam timetable entry, and a general academic activity. Verify these entries are saved and displayed correctly in the academic calendar view.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 20,
        "task_title": "Implement Academic Activities Management",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          17
        ],
        "generation_timestamp": "2025-06-19T16:27:46.190763",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.190763",
      "updated_at": "2025-06-19T16:27:46.190763"
    },
    "125": {
      "id": "task_proj_1750308664554_vnllv97tt_21_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_021_Implement_Admin_Communication_Module.md",
      "content": "# Task 21: Implement Admin Communication Module\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 20\n\n## Description\n\nDevelop UI and backend logic for Admin to send notifications to various groups (all parents/students, teachers, specific classes, or individuals).\n\n## Dependencies Checklist\n- [ ] Ensure Task 20 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create an Admin UI screen for 'Communication'. Implement a form to compose notifications with options to select recipients: 'All Parents/Students', 'Teachers Only', 'Specific Class', or 'Individual Parent/Student'. Define a 'Notification' model with fields like 'senderId', 'recipientType', 'recipientId', 'message', 'timestamp'. Use GraphQL mutations to save notifications. Consider integrating with AWS SNS and Lambda for real-time push notifications.\n\n## Testing Checklist\n\n- [ ] Log in as an Admin. Send a notification to 'All Teachers'. Verify the notification is stored and can be retrieved by teacher accounts. Send a notification to a 'Specific Class' and verify it's targeted correctly. Test sending to an individual.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 21,
        "task_title": "Implement Admin Communication Module",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          20
        ],
        "generation_timestamp": "2025-06-19T16:27:46.204430",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.204430",
      "updated_at": "2025-06-19T16:27:46.204430"
    },
    "126": {
      "id": "task_proj_1750308664554_vnllv97tt_22_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_022_Implement_Teacher_Dashboard_&_Assigned_Class/Subject_Access.md",
      "content": "# Task 22: Implement Teacher Dashboard & Assigned Class/Subject Access\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 14, Task 21\n\n## Description\n\nDevelop the Teacher dashboard UI, displaying assigned classes and subjects for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 14 is completed\n- [ ] Ensure Task 21 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Design the Teacher dashboard UI. Upon Teacher login, query the GraphQL API for 'TeacherClassSubjectAssignment' records associated with the logged-in 'TeacherProfile' for the current 'AcademicYear'. Display a clear list of assigned classes (with sections) and subjects on the dashboard. Ensure only relevant data is shown.\n\n## Testing Checklist\n\n- [ ] Log in as a Teacher who has been assigned classes and subjects by an Admin. Verify that only the classes and subjects explicitly assigned to this teacher are displayed on their dashboard. Log in as a teacher with no assignments and verify the dashboard reflects this.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 22,
        "task_title": "Implement Teacher Dashboard & Assigned Class/Subject Access",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          14,
          21
        ],
        "generation_timestamp": "2025-06-19T16:27:46.222311",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.222311",
      "updated_at": "2025-06-19T16:27:46.222311"
    },
    "127": {
      "id": "task_proj_1750308664554_vnllv97tt_23_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_023_Implement_Student_Approval_into_Classes_(Teacher).md",
      "content": "# Task 23: Implement Student Approval into Classes (Teacher)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 16, Task 22\n\n## Description\n\nDevelop UI and backend logic for Teachers to approve students into classes for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 16 is completed\n- [ ] Ensure Task 22 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create a Teacher UI screen to manage student approvals. Query 'StudentClassAssignment' records that might be in a 'pending' state (e.g., if Admin assigns but teacher needs to confirm). Provide an action for the teacher to 'approve' a student into their class, updating the 'status' field of the 'StudentClassAssignment' model via GraphQL mutation.\n\n## Testing Checklist\n\n- [ ] As an Admin, assign a student to a class. Log in as the Teacher of that class. Verify the student appears in a 'pending approval' list. Approve the student. Verify the student's status changes in the database and is reflected in the UI.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 23,
        "task_title": "Implement Student Approval into Classes (Teacher)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          16,
          22
        ],
        "generation_timestamp": "2025-06-19T16:27:46.251209",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.251209",
      "updated_at": "2025-06-19T16:27:46.251209"
    },
    "128": {
      "id": "task_proj_1750308664554_vnllv97tt_24_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_024_Implement_Weekly_Student_Attendance_Marking.md",
      "content": "# Task 24: Implement Weekly Student Attendance Marking\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 23\n\n## Description\n\nDevelop UI and backend logic for Teachers to mark student attendance using a weekly calendar interface.\n\n## Dependencies Checklist\n- [ ] Ensure Task 23 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create a Teacher UI screen for 'Attendance Management'. Implement a weekly calendar component allowing teachers to select a specific date. For the selected date and class, display a list of all students in that class. Default all students to 'Present'. Provide checkboxes or toggles for teachers to uncheck/mark 'Absent' students. On submission, save 'AttendanceRecord' entries (studentId, classId, date, status) via GraphQL mutations.\n\n## Testing Checklist\n\n- [ ] Log in as a Teacher. Select a class and a date. Mark a few students absent and submit. Verify the attendance records are correctly saved in DynamoDB. View the attendance for the same date to confirm accuracy.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 24,
        "task_title": "Implement Weekly Student Attendance Marking",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          23
        ],
        "generation_timestamp": "2025-06-19T16:27:46.279863",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.279863",
      "updated_at": "2025-06-19T16:27:46.279863"
    },
    "129": {
      "id": "task_proj_1750308664554_vnllv97tt_25_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_025_Implement_Daily_Activities_&_Homework_Entry_(Teacher).md",
      "content": "# Task 25: Implement Daily Activities & Homework Entry (Teacher)\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 24\n\n## Description\n\nDevelop UI and backend logic for Teachers to create tasks and homework entries in the daily diary for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 24 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create a Teacher UI screen for 'Daily Diary'. Implement forms to create 'DailyDiaryEntry' records, including fields for 'classId', 'subjectId', 'date', 'description', and 'type' (e.g., 'Task', 'Homework'). Allow teachers to select the relevant class and date. Use GraphQL mutations to save these entries.\n\n## Testing Checklist\n\n- [ ] Log in as a Teacher. Add a homework entry for 'Class 10 A' for a specific date. Verify the entry is saved and can be retrieved. Add a general task entry and confirm its persistence.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 25,
        "task_title": "Implement Daily Activities & Homework Entry (Teacher)",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          24
        ],
        "generation_timestamp": "2025-06-19T16:27:46.318175",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.319171",
      "updated_at": "2025-06-19T16:27:46.319171"
    },
    "130": {
      "id": "task_proj_1750308664554_vnllv97tt_26_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_026_Implement_Assessment_&_Grading_for_Students_(Teacher).md",
      "content": "# Task 26: Implement Assessment & Grading for Students (Teacher)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 25\n\n## Description\n\nDevelop UI and backend logic for Teachers to mark and grade tasks/exams for each student during the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 25 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create a Teacher UI screen for 'Assessment & Grading'. For a selected class and subject, display a list of students. Provide input fields for teachers to enter 'score' and 'maxScore' for various 'Assessment' types (e.g., 'Quiz', 'Exam', 'Assignment'). Include fields for comments. Use GraphQL mutations to save 'Assessment' records (studentId, classId, subjectId, type, score, maxScore, comments).\n\n## Testing Checklist\n\n- [ ] Log in as a Teacher. Select a class and subject. Enter scores for multiple students for a specific assessment. Verify the scores are correctly saved in DynamoDB. Test updating existing scores.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 26,
        "task_title": "Implement Assessment & Grading for Students (Teacher)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          25
        ],
        "generation_timestamp": "2025-06-19T16:27:46.344107",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.344107",
      "updated_at": "2025-06-19T16:27:46.344107"
    },
    "131": {
      "id": "task_proj_1750308664554_vnllv97tt_27_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_027_Implement_Results_Publication_(Teacher).md",
      "content": "# Task 27: Implement Results Publication (Teacher)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 26\n\n## Description\n\nDevelop UI and backend logic for Teachers to publish quarterly and half-yearly exam results for the academic year.\n\n## Dependencies Checklist\n- [ ] Ensure Task 26 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Enhance the 'Assessment' model or create a 'ResultPublication' model with a 'published' status. Create a Teacher UI screen for 'Results Publication'. Allow teachers to review aggregated assessment results for a class/academic period (e.g., quarterly, half-yearly). Provide a 'Publish' button that updates the status, making results visible to parents. Use GraphQL mutations for this status update.\n\n## Testing Checklist\n\n- [ ] Log in as a Teacher. Enter some assessment scores. Navigate to the results publication screen. Publish the results for a specific quarter/half-year. Verify the 'published' status is updated in the database. (Parent viewing will be tested in Task 30).\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 27,
        "task_title": "Implement Results Publication (Teacher)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          26
        ],
        "generation_timestamp": "2025-06-19T16:27:46.370253",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.370253",
      "updated_at": "2025-06-19T16:27:46.370253"
    },
    "132": {
      "id": "task_proj_1750308664554_vnllv97tt_28_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_028_Implement_Teacher_Communication_Module.md",
      "content": "# Task 28: Implement Teacher Communication Module\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 27\n\n## Description\n\nDevelop UI and backend logic for Teachers to send notifications to all students in their assigned class or to individual students.\n\n## Dependencies Checklist\n- [ ] Ensure Task 27 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] Create a Teacher UI screen for 'Communication'. Implement a form to compose messages with options to send to 'All Students in Class' or 'Individual Student' within their assigned classes. Use the 'Notification' model defined in Task 21. Use GraphQL mutations to save notifications, ensuring they are scoped to the teacher's assigned classes/students.\n\n## Testing Checklist\n\n- [ ] Log in as a Teacher. Send a notification to 'All Students in Class 10 A'. Verify the notification is stored and can be retrieved by students/parents in that class. Send a notification to an individual student and confirm it's targeted correctly.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 28,
        "task_title": "Implement Teacher Communication Module",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          27
        ],
        "generation_timestamp": "2025-06-19T16:27:46.390918",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.390918",
      "updated_at": "2025-06-19T16:27:46.390918"
    },
    "133": {
      "id": "task_proj_1750308664554_vnllv97tt_29_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_029_Implement_Teacher_Leave_Management_&_Parent_Dashboard.md",
      "content": "# Task 29: Implement Teacher Leave Management & Parent Dashboard\n\n## Overview\n\n**Priority**: Medium\n**Status**: Pending\n**Dependencies**: Task 28\n\n## Description\n\nDevelop UI for Teachers to submit personal leave requests and for Admin/designated approver to approve/reject them. Also, develop the initial Parent dashboard UI, allowing access to child-specific information.\n\n## Dependencies Checklist\n- [ ] Ensure Task 28 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] For Teacher Leave Management: Create a Teacher UI screen to submit 'LeaveRequest' (userId, startDate, endDate, reason). Admin UI to view pending leave requests and update their 'status' (approved/rejected) with reasons. Use GraphQL for CRUD on 'LeaveRequest'. For Parent Dashboard: Design the initial Parent dashboard UI. Upon Parent login, query 'StudentProfile's linked to the 'ParentProfile'. Display a list of children and allow the parent to select a child to view their specific data. All subsequent data access will be filtered by the selected child.\n\n## Testing Checklist\n\n- [ ] As a Teacher, submit a leave request. Log in as Admin and approve/reject it; verify status update. As a Parent, log in. If multiple children are linked, verify the selection screen appears. Select a child and verify the dashboard displays the child's name/basic info.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 29,
        "task_title": "Implement Teacher Leave Management & Parent Dashboard",
        "task_priority": "medium",
        "task_status": "pending",
        "dependencies": [
          28
        ],
        "generation_timestamp": "2025-06-19T16:27:46.409641",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.409641",
      "updated_at": "2025-06-19T16:27:46.409641"
    },
    "134": {
      "id": "task_proj_1750308664554_vnllv97tt_30_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "task_file",
      "file_name": "Task_030_Implement_Parent_Data_Viewing_(Attendance,_Diary,_Results,_Fees,_Timetable,_Homework,_Notifications,_Calendar,_Leave_Requests).md",
      "content": "# Task 30: Implement Parent Data Viewing (Attendance, Diary, Results, Fees, Timetable, Homework, Notifications, Calendar, Leave Requests)\n\n## Overview\n\n**Priority**: High\n**Status**: Pending\n**Dependencies**: Task 17, Task 18, Task 20, Task 21, Task 24, Task 25, Task 27, Task 29\n\n## Description\n\nDevelop UI for Parents to view all child-specific academic data: daily/overall attendance, daily diary entries, published results, fee structure/due dates, child's timetable, assignments/homework status, notifications, holidays, academic events, and submit leave requests for their child.\n\n## Dependencies Checklist\n- [ ] Ensure Task 17 is completed\n- [ ] Ensure Task 18 is completed\n- [ ] Ensure Task 20 is completed\n- [ ] Ensure Task 21 is completed\n- [ ] Ensure Task 24 is completed\n- [ ] Ensure Task 25 is completed\n- [ ] Ensure Task 27 is completed\n- [ ] Ensure Task 29 is completed\n- [ ] Verify all dependencies are satisfied before starting\n\n## Implementation Details Checklist\n\n- [ ] For the selected child on the Parent dashboard, implement dedicated UI sections to: 1. View 'AttendanceRecord' (daily and calculated overall percentage). 2. View 'DailyDiaryEntry' using a weekly calendar. 3. View published 'Assessment' results. 4. View 'FeeStructure' and due dates. 5. View child's 'TimetableEntry'. 6. View 'DailyDiaryEntry' of type 'Homework' and track completion (if applicable). 7. View 'Notification' details. 8. View 'Holiday' and 'AcademicActivity' entries. 9. Submit 'LeaveRequest' for their child. All data queries must be filtered by the selected child's 'studentId' and the current 'AcademicYear'.\n\n## Testing Checklist\n\n- [ ] Log in as a Parent. Select a child. Navigate through each data viewing section (Attendance, Daily Diary, Results, Fees, Timetable, Homework, Notifications, Academic Calendar). Verify that the data displayed is accurate and specific to the selected child. Submit a leave request for the child and verify it's recorded.\n\n## Acceptance Criteria Checklist\n\n- [ ] Task implementation is complete\n- [ ] All functionality works as described\n- [ ] Code follows project standards and conventions\n- [ ] Code is properly documented with comments\n- [ ] All tests are written and passing\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Documentation is updated (if applicable)\n- [ ] Code review is completed and approved\n\n## Implementation Workflow Checklist\n\n- [ ] Review task requirements and dependencies\n- [ ] Set up development environment for this task\n- [ ] Create feature branch for this task\n- [ ] Implement core functionality\n- [ ] Write and run unit tests\n- [ ] Update documentation\n- [ ] Code review and refactoring\n- [ ] Integration testing\n- [ ] Merge to main branch\n- [ ] Mark task as complete\n\n## Quality Assurance Checklist\n\n- [ ] Code follows project coding standards\n- [ ] All tests pass successfully\n- [ ] No security vulnerabilities introduced\n- [ ] Performance impact is acceptable\n- [ ] Error handling is comprehensive\n- [ ] Code is properly documented\n- [ ] Changes are backward compatible (if required)\n- [ ] No breaking changes without proper versioning\n\n---\n\n*Generated by Task Master on 2025-06-19 16:27:46*\n",
      "metadata": {
        "generated_from": "task_master",
        "task_id": 30,
        "task_title": "Implement Parent Data Viewing (Attendance, Diary, Results, Fees, Timetable, Homework, Notifications, Calendar, Leave Requests)",
        "task_priority": "high",
        "task_status": "pending",
        "dependencies": [
          17,
          18,
          20,
          21,
          24,
          25,
          27,
          29
        ],
        "generation_timestamp": "2025-06-19T16:27:46.422441",
        "is_primary": false
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.422441",
      "updated_at": "2025-06-19T16:27:46.422441"
    },
    "135": {
      "id": "tasks_index_proj_1750308664554_vnllv97tt_1750330666",
      "project_id": "proj_1750308664554_vnllv97tt",
      "file_type": "tasks_index",
      "file_name": "Tasks_Index.md",
      "content": "# Tasks Index\n\nGenerated on 2025-06-19 16:27:46\n\nTotal Tasks: 30\n\n## Task Progress Checklist\n\n### High Priority Tasks\n- [ ] **Task 1**: Project Initialization & AWS Amplify Setup\n- [ ] **Task 2**: Configure AWS Cognito for Authentication\n- [ ] **Task 3**: Design & Implement Core DynamoDB Data Models\n- [ ] **Task 4**: Configure Amplify GraphQL API for Core Models\n- [ ] **Task 6**: Implement User Registration Flow\n- [ ] **Task 7**: Implement User Login Flow\n- [ ] **Task 8**: Develop Multi-Profile Selection & Creation Logic\n- [ ] **Task 9**: Implement Profile Persistence & Auto-Redirection\n- [ ] **Task 10**: Implement Campus Management (CRUD)\n- [ ] **Task 12**: Implement Class & Subject Management\n- [ ] **Task 13**: Implement Admin Profile Approval/Deactivation\n- [ ] **Task 17**: Implement Timetable Management\n- [ ] **Task 22**: Implement Teacher Dashboard & Assigned Class/Subject Access\n- [ ] **Task 23**: Implement Student Approval into Classes (Teacher)\n- [ ] **Task 24**: Implement Weekly Student Attendance Marking\n- [ ] **Task 26**: Implement Assessment & Grading for Students (Teacher)\n- [ ] **Task 27**: Implement Results Publication (Teacher)\n- [ ] **Task 30**: Implement Parent Data Viewing (Attendance, Diary, Results, Fees, Timetable, Homework, Notifications, Calendar, Leave Requests)\n\n### Medium Priority Tasks\n- [ ] **Task 5**: Implement Base Flutter UI Structure & Navigation\n- [ ] **Task 11**: Implement Academic Year Structure Definition\n- [ ] **Task 14**: Implement Teacher Assignment to Classes & Subjects\n- [ ] **Task 15**: Implement Class Teacher Assignment\n- [ ] **Task 16**: Implement Student Assignment to Classes\n- [ ] **Task 18**: Implement Fee Structure & Due Dates Management\n- [ ] **Task 20**: Implement Academic Activities Management\n- [ ] **Task 21**: Implement Admin Communication Module\n- [ ] **Task 25**: Implement Daily Activities & Homework Entry (Teacher)\n- [ ] **Task 28**: Implement Teacher Communication Module\n- [ ] **Task 29**: Implement Teacher Leave Management & Parent Dashboard\n\n### Low Priority Tasks\n- [ ] **Task 19**: Implement Transportation Management\n\n## Project Completion Checklist\n\n- [ ] All high priority tasks completed\n- [ ] All medium priority tasks completed\n- [ ] All low priority tasks completed\n- [ ] Integration testing completed\n- [ ] Documentation finalized\n- [ ] Code review completed\n- [ ] Performance testing completed\n- [ ] Security review completed\n- [ ] Deployment preparation completed\n- [ ] Project ready for release\n\n## Task Details Table\n\n| ID | Title | Priority | Status | Dependencies |\n|----|-------|----------|--------|--------------|\n| 1 | Project Initialization & AWS Amplify Setup | high | pending | None |\n| 2 | Configure AWS Cognito for Authentication | high | pending | #1 |\n| 3 | Design & Implement Core DynamoDB Data Models | high | pending | #2 |\n| 4 | Configure Amplify GraphQL API for Core Models | high | pending | #3 |\n| 5 | Implement Base Flutter UI Structure & Navigation | medium | pending | #4 |\n| 6 | Implement User Registration Flow | high | pending | #5 |\n| 7 | Implement User Login Flow | high | pending | #6 |\n| 8 | Develop Multi-Profile Selection & Creation Logic | high | pending | #7 |\n| 9 | Implement Profile Persistence & Auto-Redirection | high | pending | #8 |\n| 10 | Implement Campus Management (CRUD) | high | pending | #9 |\n| 11 | Implement Academic Year Structure Definition | medium | pending | #10 |\n| 12 | Implement Class & Subject Management | high | pending | #11 |\n| 13 | Implement Admin Profile Approval/Deactivation | high | pending | #12 |\n| 14 | Implement Teacher Assignment to Classes & Subjects | medium | pending | #13 |\n| 15 | Implement Class Teacher Assignment | medium | pending | #14 |\n| 16 | Implement Student Assignment to Classes | medium | pending | #15 |\n| 17 | Implement Timetable Management | high | pending | #16 |\n| 18 | Implement Fee Structure & Due Dates Management | medium | pending | #17 |\n| 19 | Implement Transportation Management | low | pending | #17 |\n| 20 | Implement Academic Activities Management | medium | pending | #17 |\n| 21 | Implement Admin Communication Module | medium | pending | #20 |\n| 22 | Implement Teacher Dashboard & Assigned Class/Subject Access | high | pending | #14, #21 |\n| 23 | Implement Student Approval into Classes (Teacher) | high | pending | #16, #22 |\n| 24 | Implement Weekly Student Attendance Marking | high | pending | #23 |\n| 25 | Implement Daily Activities & Homework Entry (Teacher) | medium | pending | #24 |\n| 26 | Implement Assessment & Grading for Students (Teacher) | high | pending | #25 |\n| 27 | Implement Results Publication (Teacher) | high | pending | #26 |\n| 28 | Implement Teacher Communication Module | medium | pending | #27 |\n| 29 | Implement Teacher Leave Management & Parent Dashboard | medium | pending | #28 |\n| 30 | Implement Parent Data Viewing (Attendance, Diary, Results, Fees, Timetable, Homework, Notifications, Calendar, Leave Requests) | high | pending | #17, #18, #20, #21, #24, #25, #27, #29 |\n\n## Task Dependencies\n\nThe following shows the task dependencies:\n\n```\nTask 2 depends on: Task 1\nTask 3 depends on: Task 2\nTask 4 depends on: Task 3\nTask 5 depends on: Task 4\nTask 6 depends on: Task 5\nTask 7 depends on: Task 6\nTask 8 depends on: Task 7\nTask 9 depends on: Task 8\nTask 10 depends on: Task 9\nTask 11 depends on: Task 10\nTask 12 depends on: Task 11\nTask 13 depends on: Task 12\nTask 14 depends on: Task 13\nTask 15 depends on: Task 14\nTask 16 depends on: Task 15\nTask 17 depends on: Task 16\nTask 18 depends on: Task 17\nTask 19 depends on: Task 17\nTask 20 depends on: Task 17\nTask 21 depends on: Task 20\nTask 22 depends on: Task 14, Task 21\nTask 23 depends on: Task 16, Task 22\nTask 24 depends on: Task 23\nTask 25 depends on: Task 24\nTask 26 depends on: Task 25\nTask 27 depends on: Task 26\nTask 28 depends on: Task 27\nTask 29 depends on: Task 28\nTask 30 depends on: Task 17, Task 18, Task 20, Task 21, Task 24, Task 25, Task 27, Task 29\n```\n",
      "metadata": {
        "generated_from": "task_master",
        "tasks_count": 30,
        "generation_timestamp": "2025-06-19T16:27:46.435753",
        "is_primary": true
      },
      "status": "generated",
      "created_at": "2025-06-19T16:27:46.435753",
      "updated_at": "2025-06-19T16:27:46.435753"
    }
  }
}